
Lab3_PMS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c74  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08001da4  08001da4  00011da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800201c  0800201c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800201c  0800201c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800201c  0800201c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800201c  0800201c  0001201c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002020  08002020  00012020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08002024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000074  08002098  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002b4  08002098  000202b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001fec  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000539  00000000  00000000  00022089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d8  00000000  00000000  000225c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000000b0  00000000  00000000  000226a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010c04  00000000  00000000  00022750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000fb3  00000000  00000000  00033354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000582e4  00000000  00000000  00034307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0008c5eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b5c  00000000  00000000  0008c640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000074 	.word	0x20000074
 800014c:	00000000 	.word	0x00000000
 8000150:	08001d8c 	.word	0x08001d8c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000078 	.word	0x20000078
 800016c:	08001d8c 	.word	0x08001d8c

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	2b00      	cmp	r3, #0
 8000190:	db0b      	blt.n	80001aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	f003 021f 	and.w	r2, r3, #31
 8000198:	4906      	ldr	r1, [pc, #24]	; (80001b4 <__NVIC_EnableIRQ+0x34>)
 800019a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800019e:	095b      	lsrs	r3, r3, #5
 80001a0:	2001      	movs	r0, #1
 80001a2:	fa00 f202 	lsl.w	r2, r0, r2
 80001a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001aa:	bf00      	nop
 80001ac:	370c      	adds	r7, #12
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	e000e100 	.word	0xe000e100

080001b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001b8:	b480      	push	{r7}
 80001ba:	b083      	sub	sp, #12
 80001bc:	af00      	add	r7, sp, #0
 80001be:	4603      	mov	r3, r0
 80001c0:	6039      	str	r1, [r7, #0]
 80001c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	db0a      	blt.n	80001e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001cc:	683b      	ldr	r3, [r7, #0]
 80001ce:	b2da      	uxtb	r2, r3
 80001d0:	490c      	ldr	r1, [pc, #48]	; (8000204 <__NVIC_SetPriority+0x4c>)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	0112      	lsls	r2, r2, #4
 80001d8:	b2d2      	uxtb	r2, r2
 80001da:	440b      	add	r3, r1
 80001dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001e0:	e00a      	b.n	80001f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001e2:	683b      	ldr	r3, [r7, #0]
 80001e4:	b2da      	uxtb	r2, r3
 80001e6:	4908      	ldr	r1, [pc, #32]	; (8000208 <__NVIC_SetPriority+0x50>)
 80001e8:	79fb      	ldrb	r3, [r7, #7]
 80001ea:	f003 030f 	and.w	r3, r3, #15
 80001ee:	3b04      	subs	r3, #4
 80001f0:	0112      	lsls	r2, r2, #4
 80001f2:	b2d2      	uxtb	r2, r2
 80001f4:	440b      	add	r3, r1
 80001f6:	761a      	strb	r2, [r3, #24]
}
 80001f8:	bf00      	nop
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bc80      	pop	{r7}
 8000200:	4770      	bx	lr
 8000202:	bf00      	nop
 8000204:	e000e100 	.word	0xe000e100
 8000208:	e000ed00 	.word	0xe000ed00

0800020c <init_gpio>:
uint32_t period_value = 1000;
char mode[8] = "UP";


void init_gpio(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_IOPCEN | RCC_APB2ENR_AFIOEN; //тактирование порта С и альтернативной функции потока ввода/вывода
 8000210:	4b1c      	ldr	r3, [pc, #112]	; (8000284 <init_gpio+0x78>)
 8000212:	699b      	ldr	r3, [r3, #24]
 8000214:	4a1b      	ldr	r2, [pc, #108]	; (8000284 <init_gpio+0x78>)
 8000216:	f043 0311 	orr.w	r3, r3, #17
 800021a:	6193      	str	r3, [r2, #24]

	GPIOC->CRL &= ~(GPIO_CRL_CNF2|GPIO_CRL_CNF3|GPIO_CRL_CNF4|GPIO_CRL_CNF5|GPIO_CRL_CNF6); // pin2-6 push-pull ("00")
 800021c:	4b1a      	ldr	r3, [pc, #104]	; (8000288 <init_gpio+0x7c>)
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	4919      	ldr	r1, [pc, #100]	; (8000288 <init_gpio+0x7c>)
 8000222:	4b1a      	ldr	r3, [pc, #104]	; (800028c <init_gpio+0x80>)
 8000224:	4013      	ands	r3, r2
 8000226:	600b      	str	r3, [r1, #0]
	GPIOC->CRH &= ~(GPIO_CRH_CNF8|GPIO_CRH_CNF9|GPIO_CRH_CNF10|GPIO_CRH_CNF11); // pin8-11 push-pull ("00")
 8000228:	4b17      	ldr	r3, [pc, #92]	; (8000288 <init_gpio+0x7c>)
 800022a:	685b      	ldr	r3, [r3, #4]
 800022c:	4a16      	ldr	r2, [pc, #88]	; (8000288 <init_gpio+0x7c>)
 800022e:	f423 434c 	bic.w	r3, r3, #52224	; 0xcc00
 8000232:	f023 03cc 	bic.w	r3, r3, #204	; 0xcc
 8000236:	6053      	str	r3, [r2, #4]
	GPIOC->CRL |= GPIO_CRL_MODE2|GPIO_CRL_MODE3|GPIO_CRL_MODE4|GPIO_CRL_MODE5|GPIO_CRL_MODE6; // pin2-6 Output mode 50mHz ("11")
 8000238:	4b13      	ldr	r3, [pc, #76]	; (8000288 <init_gpio+0x7c>)
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	4912      	ldr	r1, [pc, #72]	; (8000288 <init_gpio+0x7c>)
 800023e:	4b14      	ldr	r3, [pc, #80]	; (8000290 <init_gpio+0x84>)
 8000240:	4313      	orrs	r3, r2
 8000242:	600b      	str	r3, [r1, #0]
	GPIOC->CRH |= GPIO_CRH_MODE8|GPIO_CRH_MODE9|GPIO_CRH_MODE10|GPIO_CRH_MODE11; // pin8-11 Output mode 50mHz ("11")
 8000244:	4b10      	ldr	r3, [pc, #64]	; (8000288 <init_gpio+0x7c>)
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	4a0f      	ldr	r2, [pc, #60]	; (8000288 <init_gpio+0x7c>)
 800024a:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 800024e:	f043 0333 	orr.w	r3, r3, #51	; 0x33
 8000252:	6053      	str	r3, [r2, #4]

	GPIOC->CRH |= GPIO_CRH_CNF13_1 | GPIO_CRH_CNF12_1; //см. ниже
 8000254:	4b0c      	ldr	r3, [pc, #48]	; (8000288 <init_gpio+0x7c>)
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	4a0b      	ldr	r2, [pc, #44]	; (8000288 <init_gpio+0x7c>)
 800025a:	f443 0308 	orr.w	r3, r3, #8912896	; 0x880000
 800025e:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~(GPIO_CRH_CNF13_0|GPIO_CRH_MODE13|GPIO_CRH_CNF12_0|GPIO_CRH_MODE12); //pin13, pin 12 Input mode с подтяжкой, Push-Pull ("1000")
 8000260:	4b09      	ldr	r3, [pc, #36]	; (8000288 <init_gpio+0x7c>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	4a08      	ldr	r2, [pc, #32]	; (8000288 <init_gpio+0x7c>)
 8000266:	f423 03ee 	bic.w	r3, r3, #7798784	; 0x770000
 800026a:	6053      	str	r3, [r2, #4]

	GPIOC->BSRR = GPIO_BSRR_BS13; //подтяжка pin13 с кнопкой к 1
 800026c:	4b06      	ldr	r3, [pc, #24]	; (8000288 <init_gpio+0x7c>)
 800026e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000272:	611a      	str	r2, [r3, #16]
	GPIOC->BSRR = GPIO_BSRR_BS12; //подтяжка pin12 с кнопкой к 1
 8000274:	4b04      	ldr	r3, [pc, #16]	; (8000288 <init_gpio+0x7c>)
 8000276:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800027a:	611a      	str	r2, [r3, #16]


}
 800027c:	bf00      	nop
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr
 8000284:	40021000 	.word	0x40021000
 8000288:	40011000 	.word	0x40011000
 800028c:	f33333ff 	.word	0xf33333ff
 8000290:	03333300 	.word	0x03333300

08000294 <digit>:
void digit(uint32_t num)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	2b09      	cmp	r3, #9
 80002a0:	d83f      	bhi.n	8000322 <digit+0x8e>
 80002a2:	a201      	add	r2, pc, #4	; (adr r2, 80002a8 <digit+0x14>)
 80002a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002a8:	080002d1 	.word	0x080002d1
 80002ac:	080002d9 	.word	0x080002d9
 80002b0:	080002e1 	.word	0x080002e1
 80002b4:	080002e9 	.word	0x080002e9
 80002b8:	080002f1 	.word	0x080002f1
 80002bc:	080002f9 	.word	0x080002f9
 80002c0:	08000301 	.word	0x08000301
 80002c4:	08000309 	.word	0x08000309
 80002c8:	08000311 	.word	0x08000311
 80002cc:	0800031b 	.word	0x0800031b
	switch(num)
	{
	case 0:
		GPIOC->BSRR = GPIO_BSRR_BS2|GPIO_BSRR_BS3|GPIO_BSRR_BS4|GPIO_BSRR_BS5|GPIO_BSRR_BS6|GPIO_BSRR_BS8|GPIO_BSRR_BR9;
 80002d0:	4b17      	ldr	r3, [pc, #92]	; (8000330 <digit+0x9c>)
 80002d2:	4a18      	ldr	r2, [pc, #96]	; (8000334 <digit+0xa0>)
 80002d4:	611a      	str	r2, [r3, #16]
		break;
 80002d6:	e025      	b.n	8000324 <digit+0x90>
	case 1:
		GPIOC->BSRR = GPIO_BSRR_BR2|GPIO_BSRR_BS3|GPIO_BSRR_BS4|GPIO_BSRR_BR5|GPIO_BSRR_BR6|GPIO_BSRR_BR8|GPIO_BSRR_BR9;
 80002d8:	4b15      	ldr	r3, [pc, #84]	; (8000330 <digit+0x9c>)
 80002da:	4a17      	ldr	r2, [pc, #92]	; (8000338 <digit+0xa4>)
 80002dc:	611a      	str	r2, [r3, #16]
		break;
 80002de:	e021      	b.n	8000324 <digit+0x90>
	case 2:
		GPIOC->BSRR = GPIO_BSRR_BS2|GPIO_BSRR_BS3|GPIO_BSRR_BR4|GPIO_BSRR_BS5|GPIO_BSRR_BS6|GPIO_BSRR_BR8|GPIO_BSRR_BS9;
 80002e0:	4b13      	ldr	r3, [pc, #76]	; (8000330 <digit+0x9c>)
 80002e2:	4a16      	ldr	r2, [pc, #88]	; (800033c <digit+0xa8>)
 80002e4:	611a      	str	r2, [r3, #16]
		break;
 80002e6:	e01d      	b.n	8000324 <digit+0x90>
	case 3:
		GPIOC->BSRR = GPIO_BSRR_BS2|GPIO_BSRR_BS3|GPIO_BSRR_BS4|GPIO_BSRR_BS5|GPIO_BSRR_BR6|GPIO_BSRR_BR8|GPIO_BSRR_BS9;
 80002e8:	4b11      	ldr	r3, [pc, #68]	; (8000330 <digit+0x9c>)
 80002ea:	4a15      	ldr	r2, [pc, #84]	; (8000340 <digit+0xac>)
 80002ec:	611a      	str	r2, [r3, #16]
		break;
 80002ee:	e019      	b.n	8000324 <digit+0x90>
	case 4:
		GPIOC->BSRR = GPIO_BSRR_BR2|GPIO_BSRR_BS3|GPIO_BSRR_BS4|GPIO_BSRR_BR5|GPIO_BSRR_BR6|GPIO_BSRR_BS8|GPIO_BSRR_BS9;
 80002f0:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <digit+0x9c>)
 80002f2:	4a14      	ldr	r2, [pc, #80]	; (8000344 <digit+0xb0>)
 80002f4:	611a      	str	r2, [r3, #16]
		break;
 80002f6:	e015      	b.n	8000324 <digit+0x90>
	case 5:
		GPIOC->BSRR = GPIO_BSRR_BS2|GPIO_BSRR_BR3|GPIO_BSRR_BS4|GPIO_BSRR_BS5|GPIO_BSRR_BR6|GPIO_BSRR_BS8|GPIO_BSRR_BS9;
 80002f8:	4b0d      	ldr	r3, [pc, #52]	; (8000330 <digit+0x9c>)
 80002fa:	4a13      	ldr	r2, [pc, #76]	; (8000348 <digit+0xb4>)
 80002fc:	611a      	str	r2, [r3, #16]
		break;
 80002fe:	e011      	b.n	8000324 <digit+0x90>
	case 6:
		GPIOC->BSRR = GPIO_BSRR_BS2|GPIO_BSRR_BR3|GPIO_BSRR_BS4|GPIO_BSRR_BS5|GPIO_BSRR_BS6|GPIO_BSRR_BS8|GPIO_BSRR_BS9;
 8000300:	4b0b      	ldr	r3, [pc, #44]	; (8000330 <digit+0x9c>)
 8000302:	4a12      	ldr	r2, [pc, #72]	; (800034c <digit+0xb8>)
 8000304:	611a      	str	r2, [r3, #16]
		break;
 8000306:	e00d      	b.n	8000324 <digit+0x90>
	case 7:
		GPIOC->BSRR = GPIO_BSRR_BS2|GPIO_BSRR_BS3|GPIO_BSRR_BS4|GPIO_BSRR_BR5|GPIO_BSRR_BR6|GPIO_BSRR_BR8|GPIO_BSRR_BR9;
 8000308:	4b09      	ldr	r3, [pc, #36]	; (8000330 <digit+0x9c>)
 800030a:	4a11      	ldr	r2, [pc, #68]	; (8000350 <digit+0xbc>)
 800030c:	611a      	str	r2, [r3, #16]
		break;
 800030e:	e009      	b.n	8000324 <digit+0x90>
	case 8:
		GPIOC->BSRR = GPIO_BSRR_BS2|GPIO_BSRR_BS3|GPIO_BSRR_BS4|GPIO_BSRR_BS5|GPIO_BSRR_BS6|GPIO_BSRR_BS8|GPIO_BSRR_BS9;
 8000310:	4b07      	ldr	r3, [pc, #28]	; (8000330 <digit+0x9c>)
 8000312:	f44f 725f 	mov.w	r2, #892	; 0x37c
 8000316:	611a      	str	r2, [r3, #16]
		break;
 8000318:	e004      	b.n	8000324 <digit+0x90>
	case 9:
		GPIOC->BSRR = GPIO_BSRR_BS2|GPIO_BSRR_BS3|GPIO_BSRR_BS4|GPIO_BSRR_BS5|GPIO_BSRR_BR6|GPIO_BSRR_BS8|GPIO_BSRR_BS9;
 800031a:	4b05      	ldr	r3, [pc, #20]	; (8000330 <digit+0x9c>)
 800031c:	4a0d      	ldr	r2, [pc, #52]	; (8000354 <digit+0xc0>)
 800031e:	611a      	str	r2, [r3, #16]
		break;
 8000320:	e000      	b.n	8000324 <digit+0x90>
	default:
		break;
 8000322:	bf00      	nop
	}
}
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	bc80      	pop	{r7}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40011000 	.word	0x40011000
 8000334:	0200017c 	.word	0x0200017c
 8000338:	03640018 	.word	0x03640018
 800033c:	0110026c 	.word	0x0110026c
 8000340:	0140023c 	.word	0x0140023c
 8000344:	00640318 	.word	0x00640318
 8000348:	00480334 	.word	0x00480334
 800034c:	00080374 	.word	0x00080374
 8000350:	0360001c 	.word	0x0360001c
 8000354:	0040033c 	.word	0x0040033c

08000358 <delay>:

void delay(uint32_t delay_value)
{
 8000358:	b480      	push	{r7}
 800035a:	b085      	sub	sp, #20
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i< delay_value; i++);
 8000360:	2300      	movs	r3, #0
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	e002      	b.n	800036c <delay+0x14>
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	3301      	adds	r3, #1
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	68fa      	ldr	r2, [r7, #12]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	429a      	cmp	r2, r3
 8000372:	d3f8      	bcc.n	8000366 <delay+0xe>
}
 8000374:	bf00      	nop
 8000376:	bf00      	nop
 8000378:	3714      	adds	r7, #20
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr

08000380 <init_interrupt>:

void init_interrupt()
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	EXTI->IMR |= EXTI_IMR_MR13; //накладываем маску и разрешаем прерывания
 8000384:	4b16      	ldr	r3, [pc, #88]	; (80003e0 <init_interrupt+0x60>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a15      	ldr	r2, [pc, #84]	; (80003e0 <init_interrupt+0x60>)
 800038a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800038e:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= EXTI_FTSR_TR13; //по спаду реагирует
 8000390:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <init_interrupt+0x60>)
 8000392:	68db      	ldr	r3, [r3, #12]
 8000394:	4a12      	ldr	r2, [pc, #72]	; (80003e0 <init_interrupt+0x60>)
 8000396:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800039a:	60d3      	str	r3, [r2, #12]

	AFIO->EXTICR[3] |= AFIO_EXTICR4_EXTI13_PC; //включение альтернативной функции потока ввода/вывода 13 пина
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <init_interrupt+0x64>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	4a10      	ldr	r2, [pc, #64]	; (80003e4 <init_interrupt+0x64>)
 80003a2:	f043 0320 	orr.w	r3, r3, #32
 80003a6:	6153      	str	r3, [r2, #20]

	EXTI->IMR |= EXTI_IMR_MR12; //накладываем маску и разрешаем прерывания
 80003a8:	4b0d      	ldr	r3, [pc, #52]	; (80003e0 <init_interrupt+0x60>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a0c      	ldr	r2, [pc, #48]	; (80003e0 <init_interrupt+0x60>)
 80003ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003b2:	6013      	str	r3, [r2, #0]
	EXTI->FTSR |= EXTI_FTSR_TR12; //по спаду реагирует
 80003b4:	4b0a      	ldr	r3, [pc, #40]	; (80003e0 <init_interrupt+0x60>)
 80003b6:	68db      	ldr	r3, [r3, #12]
 80003b8:	4a09      	ldr	r2, [pc, #36]	; (80003e0 <init_interrupt+0x60>)
 80003ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003be:	60d3      	str	r3, [r2, #12]

	AFIO->EXTICR[3] |= AFIO_EXTICR4_EXTI12_PC; //включение альтернативной функции потока ввода/вывода 12 пина
 80003c0:	4b08      	ldr	r3, [pc, #32]	; (80003e4 <init_interrupt+0x64>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	4a07      	ldr	r2, [pc, #28]	; (80003e4 <init_interrupt+0x64>)
 80003c6:	f043 0302 	orr.w	r3, r3, #2
 80003ca:	6153      	str	r3, [r2, #20]

	NVIC_EnableIRQ(EXTI15_10_IRQn);  //разрешаем прерывания на линии 10-15
 80003cc:	2028      	movs	r0, #40	; 0x28
 80003ce:	f7ff fed7 	bl	8000180 <__NVIC_EnableIRQ>
	NVIC_SetPriority(EXTI15_10_IRQn,0); //приоритет прерывания
 80003d2:	2100      	movs	r1, #0
 80003d4:	2028      	movs	r0, #40	; 0x28
 80003d6:	f7ff feef 	bl	80001b8 <__NVIC_SetPriority>
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40010400 	.word	0x40010400
 80003e4:	40010000 	.word	0x40010000

080003e8 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)  //вызывается при нажатии на кнопку
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR12) //проверка, что прерывание по 12 линии
 80003ec:	4b18      	ldr	r3, [pc, #96]	; (8000450 <EXTI15_10_IRQHandler+0x68>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d010      	beq.n	800041a <EXTI15_10_IRQHandler+0x32>
	{
		TIM2->CR1 ^= TIM_CR1_CEN; // меняем значение таймера
 80003f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000402:	f083 0301 	eor.w	r3, r3, #1
 8000406:	6013      	str	r3, [r2, #0]

		delay(DELAY_VAL);
 8000408:	2064      	movs	r0, #100	; 0x64
 800040a:	f7ff ffa5 	bl	8000358 <delay>
		EXTI->PR |= EXTI_PR_PR13;
 800040e:	4b10      	ldr	r3, [pc, #64]	; (8000450 <EXTI15_10_IRQHandler+0x68>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	4a0f      	ldr	r2, [pc, #60]	; (8000450 <EXTI15_10_IRQHandler+0x68>)
 8000414:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000418:	6153      	str	r3, [r2, #20]
	}

	if(EXTI->PR & EXTI_PR_PR13) //проверка, что прерывание по 13 линии
 800041a:	4b0d      	ldr	r3, [pc, #52]	; (8000450 <EXTI15_10_IRQHandler+0x68>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000422:	2b00      	cmp	r3, #0
 8000424:	d012      	beq.n	800044c <EXTI15_10_IRQHandler+0x64>
	{
		flag = !flag; // меняем значение таймера
 8000426:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <EXTI15_10_IRQHandler+0x6c>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2b00      	cmp	r3, #0
 800042c:	bf0c      	ite	eq
 800042e:	2301      	moveq	r3, #1
 8000430:	2300      	movne	r3, #0
 8000432:	b2db      	uxtb	r3, r3
 8000434:	461a      	mov	r2, r3
 8000436:	4b07      	ldr	r3, [pc, #28]	; (8000454 <EXTI15_10_IRQHandler+0x6c>)
 8000438:	601a      	str	r2, [r3, #0]

		delay(DELAY_VAL);
 800043a:	2064      	movs	r0, #100	; 0x64
 800043c:	f7ff ff8c 	bl	8000358 <delay>
		EXTI->PR |= EXTI_PR_PR12;
 8000440:	4b03      	ldr	r3, [pc, #12]	; (8000450 <EXTI15_10_IRQHandler+0x68>)
 8000442:	695b      	ldr	r3, [r3, #20]
 8000444:	4a02      	ldr	r2, [pc, #8]	; (8000450 <EXTI15_10_IRQHandler+0x68>)
 8000446:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800044a:	6153      	str	r3, [r2, #20]
	}



}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	40010400 	.word	0x40010400
 8000454:	20000090 	.word	0x20000090

08000458 <initClk>:

void initClk(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
	// Enable HSI
	RCC->CR |= RCC_CR_HSION;
 800045c:	4b2e      	ldr	r3, [pc, #184]	; (8000518 <initClk+0xc0>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a2d      	ldr	r2, [pc, #180]	; (8000518 <initClk+0xc0>)
 8000462:	f043 0301 	orr.w	r3, r3, #1
 8000466:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSIRDY)){};
 8000468:	bf00      	nop
 800046a:	4b2b      	ldr	r3, [pc, #172]	; (8000518 <initClk+0xc0>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	f003 0302 	and.w	r3, r3, #2
 8000472:	2b00      	cmp	r3, #0
 8000474:	d0f9      	beq.n	800046a <initClk+0x12>

	// Enable Prefetch Buffer
	FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000476:	4b29      	ldr	r3, [pc, #164]	; (800051c <initClk+0xc4>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a28      	ldr	r2, [pc, #160]	; (800051c <initClk+0xc4>)
 800047c:	f043 0310 	orr.w	r3, r3, #16
 8000480:	6013      	str	r3, [r2, #0]

	// Flash 2 wait state
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 8000482:	4b26      	ldr	r3, [pc, #152]	; (800051c <initClk+0xc4>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	4a25      	ldr	r2, [pc, #148]	; (800051c <initClk+0xc4>)
 8000488:	f023 0307 	bic.w	r3, r3, #7
 800048c:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_2;
 800048e:	4b23      	ldr	r3, [pc, #140]	; (800051c <initClk+0xc4>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	4a22      	ldr	r2, [pc, #136]	; (800051c <initClk+0xc4>)
 8000494:	f043 0304 	orr.w	r3, r3, #4
 8000498:	6013      	str	r3, [r2, #0]

	// HCLK = SYSCLK
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800049a:	4b1f      	ldr	r3, [pc, #124]	; (8000518 <initClk+0xc0>)
 800049c:	4a1e      	ldr	r2, [pc, #120]	; (8000518 <initClk+0xc0>)
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	6053      	str	r3, [r2, #4]

	// PCLK2 = HCLK
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
 80004a2:	4b1d      	ldr	r3, [pc, #116]	; (8000518 <initClk+0xc0>)
 80004a4:	4a1c      	ldr	r2, [pc, #112]	; (8000518 <initClk+0xc0>)
 80004a6:	685b      	ldr	r3, [r3, #4]
 80004a8:	6053      	str	r3, [r2, #4]

	// PCLK1 = HCLK
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
 80004aa:	4b1b      	ldr	r3, [pc, #108]	; (8000518 <initClk+0xc0>)
 80004ac:	685b      	ldr	r3, [r3, #4]
 80004ae:	4a1a      	ldr	r2, [pc, #104]	; (8000518 <initClk+0xc0>)
 80004b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004b4:	6053      	str	r3, [r2, #4]

	// PLL configuration: PLLCLK = HSI/2 * 16 = 64 MHz
	RCC->CFGR &= ~RCC_CFGR_PLLSRC;
 80004b6:	4b18      	ldr	r3, [pc, #96]	; (8000518 <initClk+0xc0>)
 80004b8:	685b      	ldr	r3, [r3, #4]
 80004ba:	4a17      	ldr	r2, [pc, #92]	; (8000518 <initClk+0xc0>)
 80004bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004c0:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL16;
 80004c2:	4b15      	ldr	r3, [pc, #84]	; (8000518 <initClk+0xc0>)
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	4a14      	ldr	r2, [pc, #80]	; (8000518 <initClk+0xc0>)
 80004c8:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80004cc:	6053      	str	r3, [r2, #4]

	// Enable PLL
	RCC->CR |= RCC_CR_PLLON;
 80004ce:	4b12      	ldr	r3, [pc, #72]	; (8000518 <initClk+0xc0>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a11      	ldr	r2, [pc, #68]	; (8000518 <initClk+0xc0>)
 80004d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004d8:	6013      	str	r3, [r2, #0]

	// Wait till PLL is ready
	while((RCC->CR & RCC_CR_PLLRDY) == 0) {};
 80004da:	bf00      	nop
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <initClk+0xc0>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d0f9      	beq.n	80004dc <initClk+0x84>

	// Select PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <initClk+0xc0>)
 80004ea:	685b      	ldr	r3, [r3, #4]
 80004ec:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <initClk+0xc0>)
 80004ee:	f023 0303 	bic.w	r3, r3, #3
 80004f2:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <initClk+0xc0>)
 80004f6:	685b      	ldr	r3, [r3, #4]
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <initClk+0xc0>)
 80004fa:	f043 0302 	orr.w	r3, r3, #2
 80004fe:	6053      	str	r3, [r2, #4]

	// Wait till PLL is used as system clock source
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL){};
 8000500:	bf00      	nop
 8000502:	4b05      	ldr	r3, [pc, #20]	; (8000518 <initClk+0xc0>)
 8000504:	685b      	ldr	r3, [r3, #4]
 8000506:	f003 030c 	and.w	r3, r3, #12
 800050a:	2b08      	cmp	r3, #8
 800050c:	d1f9      	bne.n	8000502 <initClk+0xaa>
}
 800050e:	bf00      	nop
 8000510:	bf00      	nop
 8000512:	46bd      	mov	sp, r7
 8000514:	bc80      	pop	{r7}
 8000516:	4770      	bx	lr
 8000518:	40021000 	.word	0x40021000
 800051c:	40022000 	.word	0x40022000

08000520 <init_tim2>:

void init_tim2(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN; //Включить тактирование TIM6
 8000524:	4b14      	ldr	r3, [pc, #80]	; (8000578 <init_tim2+0x58>)
 8000526:	69db      	ldr	r3, [r3, #28]
 8000528:	4a13      	ldr	r2, [pc, #76]	; (8000578 <init_tim2+0x58>)
 800052a:	f043 0301 	orr.w	r3, r3, #1
 800052e:	61d3      	str	r3, [r2, #28]
	//Частота APB1 для таймеров = APB1Clk * 2 = 32МГц * 2 = 64МГц
	TIM2->PSC = 64000-1;					//Предделитель частоты (64МГц/64000 = 1кГц)
 8000530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000534:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000538:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 1000-1;						//Модуль счёта таймера (1кГц/1000 = 1с)
 800053a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800053e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000542:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->DIER |= TIM_DIER_UIE;				//Разрешить прерывание по переполнению таймера
 8000544:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000548:	68db      	ldr	r3, [r3, #12]
 800054a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800054e:	f043 0301 	orr.w	r3, r3, #1
 8000552:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 |= TIM_CR1_CEN;				//Включить таймер
 8000554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800055e:	f043 0301 	orr.w	r3, r3, #1
 8000562:	6013      	str	r3, [r2, #0]

	NVIC_EnableIRQ(TIM2_IRQn);				//Разрешить прерывание от TIM2
 8000564:	201c      	movs	r0, #28
 8000566:	f7ff fe0b 	bl	8000180 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM2_IRQn, 1);			//Выставляем приоритет
 800056a:	2101      	movs	r1, #1
 800056c:	201c      	movs	r0, #28
 800056e:	f7ff fe23 	bl	80001b8 <__NVIC_SetPriority>
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40021000 	.word	0x40021000

0800057c <TIM2_IRQHandler>:



void TIM2_IRQHandler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	if(flag)
 8000580:	4b16      	ldr	r3, [pc, #88]	; (80005dc <TIM2_IRQHandler+0x60>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d005      	beq.n	8000594 <TIM2_IRQHandler+0x18>
	{
		num--;
 8000588:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <TIM2_IRQHandler+0x64>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3b01      	subs	r3, #1
 800058e:	4a14      	ldr	r2, [pc, #80]	; (80005e0 <TIM2_IRQHandler+0x64>)
 8000590:	6013      	str	r3, [r2, #0]
 8000592:	e004      	b.n	800059e <TIM2_IRQHandler+0x22>
	}
	else num++;
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <TIM2_IRQHandler+0x64>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	3301      	adds	r3, #1
 800059a:	4a11      	ldr	r2, [pc, #68]	; (80005e0 <TIM2_IRQHandler+0x64>)
 800059c:	6013      	str	r3, [r2, #0]

	if(num > 30)
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <TIM2_IRQHandler+0x64>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b1e      	cmp	r3, #30
 80005a4:	dd02      	ble.n	80005ac <TIM2_IRQHandler+0x30>
	{
		num = 0;
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <TIM2_IRQHandler+0x64>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
	}

	if((num < 0) && (flag == 1))
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <TIM2_IRQHandler+0x64>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	da06      	bge.n	80005c2 <TIM2_IRQHandler+0x46>
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <TIM2_IRQHandler+0x60>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d102      	bne.n	80005c2 <TIM2_IRQHandler+0x46>
	{
		num = 30;
 80005bc:	4b08      	ldr	r3, [pc, #32]	; (80005e0 <TIM2_IRQHandler+0x64>)
 80005be:	221e      	movs	r2, #30
 80005c0:	601a      	str	r2, [r3, #0]
	}
	TIM2->SR &= ~TIM_SR_UIF;			//Сброс флага переполнения
 80005c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005c6:	691b      	ldr	r3, [r3, #16]
 80005c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005cc:	f023 0301 	bic.w	r3, r3, #1
 80005d0:	6113      	str	r3, [r2, #16]
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop
 80005dc:	20000090 	.word	0x20000090
 80005e0:	20000000 	.word	0x20000000

080005e4 <init_UART2>:

void init_UART2(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80005e8:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <init_UART2+0x70>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	4a19      	ldr	r2, [pc, #100]	; (8000654 <init_UART2+0x70>)
 80005ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005f2:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80005f4:	4b17      	ldr	r3, [pc, #92]	; (8000654 <init_UART2+0x70>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a16      	ldr	r2, [pc, #88]	; (8000654 <init_UART2+0x70>)
 80005fa:	f043 0304 	orr.w	r3, r3, #4
 80005fe:	6193      	str	r3, [r2, #24]

	//PA2 - OUT, PA3 - IN
	GPIOA->CRL &= ~ (GPIO_CRL_CNF2 | GPIO_CRL_MODE2);
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <init_UART2+0x74>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a14      	ldr	r2, [pc, #80]	; (8000658 <init_UART2+0x74>)
 8000606:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800060a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF2_1| GPIO_CRL_MODE2_1; //PA2 AFO push-pull, output 2MHz
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <init_UART2+0x74>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a11      	ldr	r2, [pc, #68]	; (8000658 <init_UART2+0x74>)
 8000612:	f443 6320 	orr.w	r3, r3, #2560	; 0xa00
 8000616:	6013      	str	r3, [r2, #0]

	GPIOA->CRL &= ~ (GPIO_CRL_CNF3 | GPIO_CRL_MODE3);
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <init_UART2+0x74>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a0e      	ldr	r2, [pc, #56]	; (8000658 <init_UART2+0x74>)
 800061e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000622:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_CNF3_0; //PA3 floating input, input
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <init_UART2+0x74>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <init_UART2+0x74>)
 800062a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062e:	6013      	str	r3, [r2, #0]

	//частота APB1 (f(APB2)/2) /(16*28800) = 69.4 |||| 69 в hex = 0x45; 0.4*16=6.4 в hex в итоге = 0x456
	USART2->BRR = 0x456; //28800 бод
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <init_UART2+0x78>)
 8000632:	f240 4256 	movw	r2, #1110	; 0x456
 8000636:	609a      	str	r2, [r3, #8]
	USART2->CR1 |= USART_CR1_UE|USART_CR1_RE|USART_CR1_TE|USART_CR1_RXNEIE; //вкл uart, вкл Rx, Tx, прерывания при приеме
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <init_UART2+0x78>)
 800063a:	68db      	ldr	r3, [r3, #12]
 800063c:	4a07      	ldr	r2, [pc, #28]	; (800065c <init_UART2+0x78>)
 800063e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000642:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
 8000646:	60d3      	str	r3, [r2, #12]

	NVIC_EnableIRQ(USART2_IRQn);			//Разрешить прерывание от UART2
 8000648:	2026      	movs	r0, #38	; 0x26
 800064a:	f7ff fd99 	bl	8000180 <__NVIC_EnableIRQ>
	//NVIC_SetPriority(USART2_IRQn, 0);		//Выставляем приоритет
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40021000 	.word	0x40021000
 8000658:	40010800 	.word	0x40010800
 800065c:	40004400 	.word	0x40004400

08000660 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
	if((USART2->SR & USART_SR_RXNE)!=0)
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <USART2_IRQHandler+0x40>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f003 0320 	and.w	r3, r3, #32
 800066e:	2b00      	cmp	r3, #0
 8000670:	d012      	beq.n	8000698 <USART2_IRQHandler+0x38>
	{
		uint8_t len = strlen(RxBuffer);
 8000672:	480c      	ldr	r0, [pc, #48]	; (80006a4 <USART2_IRQHandler+0x44>)
 8000674:	f7ff fd7c 	bl	8000170 <strlen>
 8000678:	4603      	mov	r3, r0
 800067a:	71fb      	strb	r3, [r7, #7]
		RxBuffer[len] = USART2->DR;
 800067c:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <USART2_IRQHandler+0x40>)
 800067e:	685a      	ldr	r2, [r3, #4]
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	b2d1      	uxtb	r1, r2
 8000684:	4a07      	ldr	r2, [pc, #28]	; (80006a4 <USART2_IRQHandler+0x44>)
 8000686:	54d1      	strb	r1, [r2, r3]

		if (RxBuffer[len]==0x0D)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	4a06      	ldr	r2, [pc, #24]	; (80006a4 <USART2_IRQHandler+0x44>)
 800068c:	5cd3      	ldrb	r3, [r2, r3]
 800068e:	2b0d      	cmp	r3, #13
 8000690:	d102      	bne.n	8000698 <USART2_IRQHandler+0x38>
		{
			CommandRecieved = true;
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <USART2_IRQHandler+0x48>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40004400 	.word	0x40004400
 80006a4:	200000a4 	.word	0x200000a4
 80006a8:	20000094 	.word	0x20000094

080006ac <TxStr>:

void TxStr(char *str, bool crlf)
{
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	70fb      	strb	r3, [r7, #3]
	if (crlf)
 80006b8:	78fb      	ldrb	r3, [r7, #3]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d00b      	beq.n	80006d6 <TxStr+0x2a>
	{
		strcat(str, "\r"); //конкатинация символов конца строки
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f7ff fd56 	bl	8000170 <strlen>
 80006c4:	4603      	mov	r3, r0
 80006c6:	461a      	mov	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4413      	add	r3, r2
 80006cc:	4911      	ldr	r1, [pc, #68]	; (8000714 <TxStr+0x68>)
 80006ce:	461a      	mov	r2, r3
 80006d0:	460b      	mov	r3, r1
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	8013      	strh	r3, [r2, #0]
	}
	for(uint16_t i = 0; i<strlen(str); i++)
 80006d6:	2300      	movs	r3, #0
 80006d8:	81fb      	strh	r3, [r7, #14]
 80006da:	e00f      	b.n	80006fc <TxStr+0x50>
	{
		USART2->DR = str[i]; //побайтово отправляем
 80006dc:	89fb      	ldrh	r3, [r7, #14]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	781a      	ldrb	r2, [r3, #0]
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <TxStr+0x6c>)
 80006e6:	605a      	str	r2, [r3, #4]
		while((USART2->SR & USART_SR_TC) == 0) {}; //ждем подтверждения что байт передан
 80006e8:	bf00      	nop
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <TxStr+0x6c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0f9      	beq.n	80006ea <TxStr+0x3e>
	for(uint16_t i = 0; i<strlen(str); i++)
 80006f6:	89fb      	ldrh	r3, [r7, #14]
 80006f8:	3301      	adds	r3, #1
 80006fa:	81fb      	strh	r3, [r7, #14]
 80006fc:	89fc      	ldrh	r4, [r7, #14]
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f7ff fd36 	bl	8000170 <strlen>
 8000704:	4603      	mov	r3, r0
 8000706:	429c      	cmp	r4, r3
 8000708:	d3e8      	bcc.n	80006dc <TxStr+0x30>
	}
}
 800070a:	bf00      	nop
 800070c:	bf00      	nop
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	bd90      	pop	{r4, r7, pc}
 8000714:	08001da4 	.word	0x08001da4
 8000718:	40004400 	.word	0x40004400

0800071c <ExecuteCommand>:

void ExecuteCommand(void)
{
 800071c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
	memset(TxBuffer,0,256);
 8000722:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000726:	2100      	movs	r1, #0
 8000728:	488c      	ldr	r0, [pc, #560]	; (800095c <ExecuteCommand+0x240>)
 800072a:	f000 fa19 	bl	8000b60 <memset>

	if(strncmp(RxBuffer, "*IDN?",5) == 0)
 800072e:	2205      	movs	r2, #5
 8000730:	498b      	ldr	r1, [pc, #556]	; (8000960 <ExecuteCommand+0x244>)
 8000732:	488c      	ldr	r0, [pc, #560]	; (8000964 <ExecuteCommand+0x248>)
 8000734:	f000 fa68 	bl	8000c08 <strncmp>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d119      	bne.n	8000772 <ExecuteCommand+0x56>
	{
		strcpy(TxBuffer, "Khamidullin, Khodzhich, Islomboev IU4-72B");
 800073e:	4b87      	ldr	r3, [pc, #540]	; (800095c <ExecuteCommand+0x240>)
 8000740:	4a89      	ldr	r2, [pc, #548]	; (8000968 <ExecuteCommand+0x24c>)
 8000742:	4614      	mov	r4, r2
 8000744:	469c      	mov	ip, r3
 8000746:	f104 0e20 	add.w	lr, r4, #32
 800074a:	4665      	mov	r5, ip
 800074c:	4626      	mov	r6, r4
 800074e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000750:	6028      	str	r0, [r5, #0]
 8000752:	6069      	str	r1, [r5, #4]
 8000754:	60aa      	str	r2, [r5, #8]
 8000756:	60eb      	str	r3, [r5, #12]
 8000758:	3410      	adds	r4, #16
 800075a:	f10c 0c10 	add.w	ip, ip, #16
 800075e:	4574      	cmp	r4, lr
 8000760:	d1f3      	bne.n	800074a <ExecuteCommand+0x2e>
 8000762:	4662      	mov	r2, ip
 8000764:	4623      	mov	r3, r4
 8000766:	cb03      	ldmia	r3!, {r0, r1}
 8000768:	6010      	str	r0, [r2, #0]
 800076a:	6051      	str	r1, [r2, #4]
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	8113      	strh	r3, [r2, #8]
 8000770:	e0e2      	b.n	8000938 <ExecuteCommand+0x21c>

	}
	else if(strncmp(RxBuffer, "SET",3) == 0)
 8000772:	2203      	movs	r2, #3
 8000774:	497d      	ldr	r1, [pc, #500]	; (800096c <ExecuteCommand+0x250>)
 8000776:	487b      	ldr	r0, [pc, #492]	; (8000964 <ExecuteCommand+0x248>)
 8000778:	f000 fa46 	bl	8000c08 <strncmp>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d11f      	bne.n	80007c2 <ExecuteCommand+0xa6>
	{
		strcpy(TxBuffer, "Ok");
 8000782:	4b76      	ldr	r3, [pc, #472]	; (800095c <ExecuteCommand+0x240>)
 8000784:	4a7a      	ldr	r2, [pc, #488]	; (8000970 <ExecuteCommand+0x254>)
 8000786:	8811      	ldrh	r1, [r2, #0]
 8000788:	7892      	ldrb	r2, [r2, #2]
 800078a:	8019      	strh	r1, [r3, #0]
 800078c:	709a      	strb	r2, [r3, #2]
		int value;
		sscanf(RxBuffer, "%*s %u", &value); //звездочка игнорирует строку s; u - беззнаковое число
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	461a      	mov	r2, r3
 8000792:	4978      	ldr	r1, [pc, #480]	; (8000974 <ExecuteCommand+0x258>)
 8000794:	4873      	ldr	r0, [pc, #460]	; (8000964 <ExecuteCommand+0x248>)
 8000796:	f000 fa0b 	bl	8000bb0 <siscanf>
		if ((0<value)&&(value<31))
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b00      	cmp	r3, #0
 800079e:	dd06      	ble.n	80007ae <ExecuteCommand+0x92>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b1e      	cmp	r3, #30
 80007a4:	dc03      	bgt.n	80007ae <ExecuteCommand+0x92>
		{
			num = value;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	4a73      	ldr	r2, [pc, #460]	; (8000978 <ExecuteCommand+0x25c>)
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	e0c4      	b.n	8000938 <ExecuteCommand+0x21c>
		}
		else
		{
			strcpy(TxBuffer, "Invalid value");
 80007ae:	4a6b      	ldr	r2, [pc, #428]	; (800095c <ExecuteCommand+0x240>)
 80007b0:	4b72      	ldr	r3, [pc, #456]	; (800097c <ExecuteCommand+0x260>)
 80007b2:	4614      	mov	r4, r2
 80007b4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80007b6:	6020      	str	r0, [r4, #0]
 80007b8:	6061      	str	r1, [r4, #4]
 80007ba:	60a2      	str	r2, [r4, #8]
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	81a3      	strh	r3, [r4, #12]
 80007c0:	e0ba      	b.n	8000938 <ExecuteCommand+0x21c>
		}

	}
	else if (strncmp(RxBuffer, "PERIOD ",7) == 0)
 80007c2:	2207      	movs	r2, #7
 80007c4:	496e      	ldr	r1, [pc, #440]	; (8000980 <ExecuteCommand+0x264>)
 80007c6:	4867      	ldr	r0, [pc, #412]	; (8000964 <ExecuteCommand+0x248>)
 80007c8:	f000 fa1e 	bl	8000c08 <strncmp>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d128      	bne.n	8000824 <ExecuteCommand+0x108>
	{
		strcpy(TxBuffer, "Ok");
 80007d2:	4b62      	ldr	r3, [pc, #392]	; (800095c <ExecuteCommand+0x240>)
 80007d4:	4a66      	ldr	r2, [pc, #408]	; (8000970 <ExecuteCommand+0x254>)
 80007d6:	8811      	ldrh	r1, [r2, #0]
 80007d8:	7892      	ldrb	r2, [r2, #2]
 80007da:	8019      	strh	r1, [r3, #0]
 80007dc:	709a      	strb	r2, [r3, #2]
		sscanf(RxBuffer, "%*s %u", &period_value); //звездочка игнорирует строку s; u - беззнаковое число
 80007de:	4a69      	ldr	r2, [pc, #420]	; (8000984 <ExecuteCommand+0x268>)
 80007e0:	4964      	ldr	r1, [pc, #400]	; (8000974 <ExecuteCommand+0x258>)
 80007e2:	4860      	ldr	r0, [pc, #384]	; (8000964 <ExecuteCommand+0x248>)
 80007e4:	f000 f9e4 	bl	8000bb0 <siscanf>
		if ((100<=period_value)&&(period_value<=5000))
 80007e8:	4b66      	ldr	r3, [pc, #408]	; (8000984 <ExecuteCommand+0x268>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b63      	cmp	r3, #99	; 0x63
 80007ee:	d90f      	bls.n	8000810 <ExecuteCommand+0xf4>
 80007f0:	4b64      	ldr	r3, [pc, #400]	; (8000984 <ExecuteCommand+0x268>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d809      	bhi.n	8000810 <ExecuteCommand+0xf4>
		{
			TIM2->ARR = period_value;
 80007fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000800:	4b60      	ldr	r3, [pc, #384]	; (8000984 <ExecuteCommand+0x268>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	62d3      	str	r3, [r2, #44]	; 0x2c
			TIM2->CNT = 0;
 8000806:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	; 0x24
 800080e:	e093      	b.n	8000938 <ExecuteCommand+0x21c>
		}
		else
		{
			strcpy(TxBuffer, "Invalid value");
 8000810:	4a52      	ldr	r2, [pc, #328]	; (800095c <ExecuteCommand+0x240>)
 8000812:	4b5a      	ldr	r3, [pc, #360]	; (800097c <ExecuteCommand+0x260>)
 8000814:	4614      	mov	r4, r2
 8000816:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000818:	6020      	str	r0, [r4, #0]
 800081a:	6061      	str	r1, [r4, #4]
 800081c:	60a2      	str	r2, [r4, #8]
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	81a3      	strh	r3, [r4, #12]
 8000822:	e089      	b.n	8000938 <ExecuteCommand+0x21c>
		}
	}
	else if(strncmp(RxBuffer, "GET?",4) == 0)
 8000824:	2204      	movs	r2, #4
 8000826:	4958      	ldr	r1, [pc, #352]	; (8000988 <ExecuteCommand+0x26c>)
 8000828:	484e      	ldr	r0, [pc, #312]	; (8000964 <ExecuteCommand+0x248>)
 800082a:	f000 f9ed 	bl	8000c08 <strncmp>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d107      	bne.n	8000844 <ExecuteCommand+0x128>
		{
			sprintf(TxBuffer, "%d", num);
 8000834:	4b50      	ldr	r3, [pc, #320]	; (8000978 <ExecuteCommand+0x25c>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	4954      	ldr	r1, [pc, #336]	; (800098c <ExecuteCommand+0x270>)
 800083c:	4847      	ldr	r0, [pc, #284]	; (800095c <ExecuteCommand+0x240>)
 800083e:	f000 f997 	bl	8000b70 <siprintf>
 8000842:	e079      	b.n	8000938 <ExecuteCommand+0x21c>
		}
	else if(strncmp(RxBuffer, "PERIOD?",7) == 0)
 8000844:	2207      	movs	r2, #7
 8000846:	4952      	ldr	r1, [pc, #328]	; (8000990 <ExecuteCommand+0x274>)
 8000848:	4846      	ldr	r0, [pc, #280]	; (8000964 <ExecuteCommand+0x248>)
 800084a:	f000 f9dd 	bl	8000c08 <strncmp>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d107      	bne.n	8000864 <ExecuteCommand+0x148>
		{
			sprintf(TxBuffer, "%d", period_value);
 8000854:	4b4b      	ldr	r3, [pc, #300]	; (8000984 <ExecuteCommand+0x268>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	494c      	ldr	r1, [pc, #304]	; (800098c <ExecuteCommand+0x270>)
 800085c:	483f      	ldr	r0, [pc, #252]	; (800095c <ExecuteCommand+0x240>)
 800085e:	f000 f987 	bl	8000b70 <siprintf>
 8000862:	e069      	b.n	8000938 <ExecuteCommand+0x21c>
		}
	else if(strncmp(RxBuffer, "DIR ",4) == 0)
 8000864:	2204      	movs	r2, #4
 8000866:	494b      	ldr	r1, [pc, #300]	; (8000994 <ExecuteCommand+0x278>)
 8000868:	483e      	ldr	r0, [pc, #248]	; (8000964 <ExecuteCommand+0x248>)
 800086a:	f000 f9cd 	bl	8000c08 <strncmp>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d133      	bne.n	80008dc <ExecuteCommand+0x1c0>
		{
			sscanf(RxBuffer, "%*s %s", &mode); //звездочка игнорирует строку s; u - беззнаковое число
 8000874:	4a48      	ldr	r2, [pc, #288]	; (8000998 <ExecuteCommand+0x27c>)
 8000876:	4949      	ldr	r1, [pc, #292]	; (800099c <ExecuteCommand+0x280>)
 8000878:	483a      	ldr	r0, [pc, #232]	; (8000964 <ExecuteCommand+0x248>)
 800087a:	f000 f999 	bl	8000bb0 <siscanf>
			if (strncmp(mode, "UP",2) == 0)
 800087e:	2202      	movs	r2, #2
 8000880:	4947      	ldr	r1, [pc, #284]	; (80009a0 <ExecuteCommand+0x284>)
 8000882:	4845      	ldr	r0, [pc, #276]	; (8000998 <ExecuteCommand+0x27c>)
 8000884:	f000 f9c0 	bl	8000c08 <strncmp>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d108      	bne.n	80008a0 <ExecuteCommand+0x184>
			{
				strcpy(TxBuffer, "Ok");
 800088e:	4b33      	ldr	r3, [pc, #204]	; (800095c <ExecuteCommand+0x240>)
 8000890:	4a37      	ldr	r2, [pc, #220]	; (8000970 <ExecuteCommand+0x254>)
 8000892:	8811      	ldrh	r1, [r2, #0]
 8000894:	7892      	ldrb	r2, [r2, #2]
 8000896:	8019      	strh	r1, [r3, #0]
 8000898:	709a      	strb	r2, [r3, #2]
				flag = 0;
 800089a:	4b42      	ldr	r3, [pc, #264]	; (80009a4 <ExecuteCommand+0x288>)
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
			}
			if (strncmp(mode, "DOWN",4) == 0)
 80008a0:	2204      	movs	r2, #4
 80008a2:	4941      	ldr	r1, [pc, #260]	; (80009a8 <ExecuteCommand+0x28c>)
 80008a4:	483c      	ldr	r0, [pc, #240]	; (8000998 <ExecuteCommand+0x27c>)
 80008a6:	f000 f9af 	bl	8000c08 <strncmp>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d109      	bne.n	80008c4 <ExecuteCommand+0x1a8>
			{
				strcpy(TxBuffer, "Ok");
 80008b0:	4b2a      	ldr	r3, [pc, #168]	; (800095c <ExecuteCommand+0x240>)
 80008b2:	4a2f      	ldr	r2, [pc, #188]	; (8000970 <ExecuteCommand+0x254>)
 80008b4:	8811      	ldrh	r1, [r2, #0]
 80008b6:	7892      	ldrb	r2, [r2, #2]
 80008b8:	8019      	strh	r1, [r3, #0]
 80008ba:	709a      	strb	r2, [r3, #2]
				flag = 1;
 80008bc:	4b39      	ldr	r3, [pc, #228]	; (80009a4 <ExecuteCommand+0x288>)
 80008be:	2201      	movs	r2, #1
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	e039      	b.n	8000938 <ExecuteCommand+0x21c>
			}
			else
			{
				strcpy(TxBuffer, "Invalid parameter");
 80008c4:	4a25      	ldr	r2, [pc, #148]	; (800095c <ExecuteCommand+0x240>)
 80008c6:	4b39      	ldr	r3, [pc, #228]	; (80009ac <ExecuteCommand+0x290>)
 80008c8:	4615      	mov	r5, r2
 80008ca:	461c      	mov	r4, r3
 80008cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008ce:	6028      	str	r0, [r5, #0]
 80008d0:	6069      	str	r1, [r5, #4]
 80008d2:	60aa      	str	r2, [r5, #8]
 80008d4:	60eb      	str	r3, [r5, #12]
 80008d6:	8823      	ldrh	r3, [r4, #0]
 80008d8:	822b      	strh	r3, [r5, #16]
 80008da:	e02d      	b.n	8000938 <ExecuteCommand+0x21c>
			}
		}
	else if(strncmp(RxBuffer, "DIR?",4) == 0)
 80008dc:	2204      	movs	r2, #4
 80008de:	4934      	ldr	r1, [pc, #208]	; (80009b0 <ExecuteCommand+0x294>)
 80008e0:	4820      	ldr	r0, [pc, #128]	; (8000964 <ExecuteCommand+0x248>)
 80008e2:	f000 f991 	bl	8000c08 <strncmp>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d11c      	bne.n	8000926 <ExecuteCommand+0x20a>
		{
			if (strncmp(mode, "UP",2) == 0)
 80008ec:	2202      	movs	r2, #2
 80008ee:	492c      	ldr	r1, [pc, #176]	; (80009a0 <ExecuteCommand+0x284>)
 80008f0:	4829      	ldr	r0, [pc, #164]	; (8000998 <ExecuteCommand+0x27c>)
 80008f2:	f000 f989 	bl	8000c08 <strncmp>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d105      	bne.n	8000908 <ExecuteCommand+0x1ec>
			{
				strcpy(TxBuffer, "UP");
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <ExecuteCommand+0x240>)
 80008fe:	4a28      	ldr	r2, [pc, #160]	; (80009a0 <ExecuteCommand+0x284>)
 8000900:	8811      	ldrh	r1, [r2, #0]
 8000902:	7892      	ldrb	r2, [r2, #2]
 8000904:	8019      	strh	r1, [r3, #0]
 8000906:	709a      	strb	r2, [r3, #2]
			}
			if (strncmp(mode, "DOWN",4) == 0)
 8000908:	2204      	movs	r2, #4
 800090a:	4927      	ldr	r1, [pc, #156]	; (80009a8 <ExecuteCommand+0x28c>)
 800090c:	4822      	ldr	r0, [pc, #136]	; (8000998 <ExecuteCommand+0x27c>)
 800090e:	f000 f97b 	bl	8000c08 <strncmp>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d10f      	bne.n	8000938 <ExecuteCommand+0x21c>
			{
				strcpy(TxBuffer, "DOWN");
 8000918:	4b10      	ldr	r3, [pc, #64]	; (800095c <ExecuteCommand+0x240>)
 800091a:	4a23      	ldr	r2, [pc, #140]	; (80009a8 <ExecuteCommand+0x28c>)
 800091c:	6810      	ldr	r0, [r2, #0]
 800091e:	6018      	str	r0, [r3, #0]
 8000920:	7912      	ldrb	r2, [r2, #4]
 8000922:	711a      	strb	r2, [r3, #4]
 8000924:	e008      	b.n	8000938 <ExecuteCommand+0x21c>
			}
		}
	else
	{
		strcpy(TxBuffer, "Unknown command");
 8000926:	4a0d      	ldr	r2, [pc, #52]	; (800095c <ExecuteCommand+0x240>)
 8000928:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <ExecuteCommand+0x298>)
 800092a:	4614      	mov	r4, r2
 800092c:	461d      	mov	r5, r3
 800092e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000930:	6020      	str	r0, [r4, #0]
 8000932:	6061      	str	r1, [r4, #4]
 8000934:	60a2      	str	r2, [r4, #8]
 8000936:	60e3      	str	r3, [r4, #12]
	}


	TxStr(TxBuffer, true);
 8000938:	2101      	movs	r1, #1
 800093a:	4808      	ldr	r0, [pc, #32]	; (800095c <ExecuteCommand+0x240>)
 800093c:	f7ff feb6 	bl	80006ac <TxStr>
	memset(RxBuffer,0,256);
 8000940:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000944:	2100      	movs	r1, #0
 8000946:	4807      	ldr	r0, [pc, #28]	; (8000964 <ExecuteCommand+0x248>)
 8000948:	f000 f90a 	bl	8000b60 <memset>
	CommandRecieved = false;
 800094c:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <ExecuteCommand+0x29c>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800095a:	bf00      	nop
 800095c:	200001a4 	.word	0x200001a4
 8000960:	08001da8 	.word	0x08001da8
 8000964:	200000a4 	.word	0x200000a4
 8000968:	08001db0 	.word	0x08001db0
 800096c:	08001ddc 	.word	0x08001ddc
 8000970:	08001de0 	.word	0x08001de0
 8000974:	08001de4 	.word	0x08001de4
 8000978:	20000000 	.word	0x20000000
 800097c:	08001dec 	.word	0x08001dec
 8000980:	08001dfc 	.word	0x08001dfc
 8000984:	20000004 	.word	0x20000004
 8000988:	08001e04 	.word	0x08001e04
 800098c:	08001e0c 	.word	0x08001e0c
 8000990:	08001e10 	.word	0x08001e10
 8000994:	08001e18 	.word	0x08001e18
 8000998:	20000008 	.word	0x20000008
 800099c:	08001e20 	.word	0x08001e20
 80009a0:	08001e28 	.word	0x08001e28
 80009a4:	20000090 	.word	0x20000090
 80009a8:	08001e2c 	.word	0x08001e2c
 80009ac:	08001e34 	.word	0x08001e34
 80009b0:	08001e48 	.word	0x08001e48
 80009b4:	08001e50 	.word	0x08001e50
 80009b8:	20000094 	.word	0x20000094

080009bc <main>:

int main(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0

	initClk();
 80009c0:	f7ff fd4a 	bl	8000458 <initClk>
	init_gpio();
 80009c4:	f7ff fc22 	bl	800020c <init_gpio>
	init_interrupt();
 80009c8:	f7ff fcda 	bl	8000380 <init_interrupt>
	init_tim2();
 80009cc:	f7ff fda8 	bl	8000520 <init_tim2>
	init_UART2();
 80009d0:	f7ff fe08 	bl	80005e4 <init_UART2>

    while(true)
    {
    	if(CommandRecieved)
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <main+0x78>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <main+0x24>
		{
			ExecuteCommand();
 80009dc:	f7ff fe9e 	bl	800071c <ExecuteCommand>
		}
    	GPIOC->BSRR = GPIO_BSRR_BS10|GPIO_BSRR_BR11;
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <main+0x7c>)
 80009e2:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <main+0x80>)
 80009e4:	611a      	str	r2, [r3, #16]
    	digit(num % 10);
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <main+0x84>)
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <main+0x88>)
 80009ec:	fb83 1302 	smull	r1, r3, r3, r2
 80009f0:	1099      	asrs	r1, r3, #2
 80009f2:	17d3      	asrs	r3, r2, #31
 80009f4:	1ac9      	subs	r1, r1, r3
 80009f6:	460b      	mov	r3, r1
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	440b      	add	r3, r1
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	1ad1      	subs	r1, r2, r3
 8000a00:	460b      	mov	r3, r1
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fc46 	bl	8000294 <digit>
    	delay(DELAY_VAL);
 8000a08:	2064      	movs	r0, #100	; 0x64
 8000a0a:	f7ff fca5 	bl	8000358 <delay>

    	GPIOC->BSRR = GPIO_BSRR_BR10|GPIO_BSRR_BS11;
 8000a0e:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <main+0x7c>)
 8000a10:	4a0d      	ldr	r2, [pc, #52]	; (8000a48 <main+0x8c>)
 8000a12:	611a      	str	r2, [r3, #16]
    	digit(num / 10);
 8000a14:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <main+0x84>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <main+0x88>)
 8000a1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a1e:	1092      	asrs	r2, r2, #2
 8000a20:	17db      	asrs	r3, r3, #31
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fc35 	bl	8000294 <digit>
    	delay(DELAY_VAL);
 8000a2a:	2064      	movs	r0, #100	; 0x64
 8000a2c:	f7ff fc94 	bl	8000358 <delay>
    	if(CommandRecieved)
 8000a30:	e7d0      	b.n	80009d4 <main+0x18>
 8000a32:	bf00      	nop
 8000a34:	20000094 	.word	0x20000094
 8000a38:	40011000 	.word	0x40011000
 8000a3c:	08000400 	.word	0x08000400
 8000a40:	20000000 	.word	0x20000000
 8000a44:	66666667 	.word	0x66666667
 8000a48:	04000800 	.word	0x04000800

08000a4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a54:	4a14      	ldr	r2, [pc, #80]	; (8000aa8 <_sbrk+0x5c>)
 8000a56:	4b15      	ldr	r3, [pc, #84]	; (8000aac <_sbrk+0x60>)
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <_sbrk+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d102      	bne.n	8000a6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <_sbrk+0x64>)
 8000a6a:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <_sbrk+0x68>)
 8000a6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <_sbrk+0x64>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4413      	add	r3, r2
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	d207      	bcs.n	8000a8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a7c:	f000 f846 	bl	8000b0c <__errno>
 8000a80:	4603      	mov	r3, r0
 8000a82:	220c      	movs	r2, #12
 8000a84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	e009      	b.n	8000aa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <_sbrk+0x64>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <_sbrk+0x64>)
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <_sbrk+0x64>)
 8000a9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20005000 	.word	0x20005000
 8000aac:	00000400 	.word	0x00000400
 8000ab0:	20000098 	.word	0x20000098
 8000ab4:	200002b8 	.word	0x200002b8

08000ab8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ab8:	480d      	ldr	r0, [pc, #52]	; (8000af0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000aba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000abc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ac2:	490d      	ldr	r1, [pc, #52]	; (8000af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <LoopForever+0xe>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad8:	4c0a      	ldr	r4, [pc, #40]	; (8000b04 <LoopForever+0x16>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ae6:	f000 f817 	bl	8000b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aea:	f7ff ff67 	bl	80009bc <main>

08000aee <LoopForever>:

LoopForever:
    b LoopForever
 8000aee:	e7fe      	b.n	8000aee <LoopForever>
  ldr   r0, =_estack
 8000af0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000afc:	08002024 	.word	0x08002024
  ldr r2, =_sbss
 8000b00:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b04:	200002b4 	.word	0x200002b4

08000b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b08:	e7fe      	b.n	8000b08 <ADC1_2_IRQHandler>
	...

08000b0c <__errno>:
 8000b0c:	4b01      	ldr	r3, [pc, #4]	; (8000b14 <__errno+0x8>)
 8000b0e:	6818      	ldr	r0, [r3, #0]
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000010 	.word	0x20000010

08000b18 <__libc_init_array>:
 8000b18:	b570      	push	{r4, r5, r6, lr}
 8000b1a:	2600      	movs	r6, #0
 8000b1c:	4d0c      	ldr	r5, [pc, #48]	; (8000b50 <__libc_init_array+0x38>)
 8000b1e:	4c0d      	ldr	r4, [pc, #52]	; (8000b54 <__libc_init_array+0x3c>)
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	10a4      	asrs	r4, r4, #2
 8000b24:	42a6      	cmp	r6, r4
 8000b26:	d109      	bne.n	8000b3c <__libc_init_array+0x24>
 8000b28:	f001 f930 	bl	8001d8c <_init>
 8000b2c:	2600      	movs	r6, #0
 8000b2e:	4d0a      	ldr	r5, [pc, #40]	; (8000b58 <__libc_init_array+0x40>)
 8000b30:	4c0a      	ldr	r4, [pc, #40]	; (8000b5c <__libc_init_array+0x44>)
 8000b32:	1b64      	subs	r4, r4, r5
 8000b34:	10a4      	asrs	r4, r4, #2
 8000b36:	42a6      	cmp	r6, r4
 8000b38:	d105      	bne.n	8000b46 <__libc_init_array+0x2e>
 8000b3a:	bd70      	pop	{r4, r5, r6, pc}
 8000b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b40:	4798      	blx	r3
 8000b42:	3601      	adds	r6, #1
 8000b44:	e7ee      	b.n	8000b24 <__libc_init_array+0xc>
 8000b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b4a:	4798      	blx	r3
 8000b4c:	3601      	adds	r6, #1
 8000b4e:	e7f2      	b.n	8000b36 <__libc_init_array+0x1e>
 8000b50:	0800201c 	.word	0x0800201c
 8000b54:	0800201c 	.word	0x0800201c
 8000b58:	0800201c 	.word	0x0800201c
 8000b5c:	08002020 	.word	0x08002020

08000b60 <memset>:
 8000b60:	4603      	mov	r3, r0
 8000b62:	4402      	add	r2, r0
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d100      	bne.n	8000b6a <memset+0xa>
 8000b68:	4770      	bx	lr
 8000b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8000b6e:	e7f9      	b.n	8000b64 <memset+0x4>

08000b70 <siprintf>:
 8000b70:	b40e      	push	{r1, r2, r3}
 8000b72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000b76:	b500      	push	{lr}
 8000b78:	b09c      	sub	sp, #112	; 0x70
 8000b7a:	ab1d      	add	r3, sp, #116	; 0x74
 8000b7c:	9002      	str	r0, [sp, #8]
 8000b7e:	9006      	str	r0, [sp, #24]
 8000b80:	9107      	str	r1, [sp, #28]
 8000b82:	9104      	str	r1, [sp, #16]
 8000b84:	4808      	ldr	r0, [pc, #32]	; (8000ba8 <siprintf+0x38>)
 8000b86:	4909      	ldr	r1, [pc, #36]	; (8000bac <siprintf+0x3c>)
 8000b88:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b8c:	9105      	str	r1, [sp, #20]
 8000b8e:	6800      	ldr	r0, [r0, #0]
 8000b90:	a902      	add	r1, sp, #8
 8000b92:	9301      	str	r3, [sp, #4]
 8000b94:	f000 f8a6 	bl	8000ce4 <_svfiprintf_r>
 8000b98:	2200      	movs	r2, #0
 8000b9a:	9b02      	ldr	r3, [sp, #8]
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	b01c      	add	sp, #112	; 0x70
 8000ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ba4:	b003      	add	sp, #12
 8000ba6:	4770      	bx	lr
 8000ba8:	20000010 	.word	0x20000010
 8000bac:	ffff0208 	.word	0xffff0208

08000bb0 <siscanf>:
 8000bb0:	b40e      	push	{r1, r2, r3}
 8000bb2:	f44f 7201 	mov.w	r2, #516	; 0x204
 8000bb6:	b530      	push	{r4, r5, lr}
 8000bb8:	b09c      	sub	sp, #112	; 0x70
 8000bba:	ac1f      	add	r4, sp, #124	; 0x7c
 8000bbc:	f854 5b04 	ldr.w	r5, [r4], #4
 8000bc0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8000bc4:	9002      	str	r0, [sp, #8]
 8000bc6:	9006      	str	r0, [sp, #24]
 8000bc8:	f7ff fad2 	bl	8000170 <strlen>
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <siscanf+0x4c>)
 8000bce:	9003      	str	r0, [sp, #12]
 8000bd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8000bd6:	9314      	str	r3, [sp, #80]	; 0x50
 8000bd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bdc:	9007      	str	r0, [sp, #28]
 8000bde:	4808      	ldr	r0, [pc, #32]	; (8000c00 <siscanf+0x50>)
 8000be0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000be4:	462a      	mov	r2, r5
 8000be6:	4623      	mov	r3, r4
 8000be8:	a902      	add	r1, sp, #8
 8000bea:	6800      	ldr	r0, [r0, #0]
 8000bec:	9401      	str	r4, [sp, #4]
 8000bee:	f000 f9d3 	bl	8000f98 <__ssvfiscanf_r>
 8000bf2:	b01c      	add	sp, #112	; 0x70
 8000bf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000bf8:	b003      	add	sp, #12
 8000bfa:	4770      	bx	lr
 8000bfc:	08000c05 	.word	0x08000c05
 8000c00:	20000010 	.word	0x20000010

08000c04 <__seofread>:
 8000c04:	2000      	movs	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <strncmp>:
 8000c08:	b510      	push	{r4, lr}
 8000c0a:	b16a      	cbz	r2, 8000c28 <strncmp+0x20>
 8000c0c:	3901      	subs	r1, #1
 8000c0e:	1884      	adds	r4, r0, r2
 8000c10:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000c14:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d103      	bne.n	8000c24 <strncmp+0x1c>
 8000c1c:	42a0      	cmp	r0, r4
 8000c1e:	d001      	beq.n	8000c24 <strncmp+0x1c>
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d1f5      	bne.n	8000c10 <strncmp+0x8>
 8000c24:	1a98      	subs	r0, r3, r2
 8000c26:	bd10      	pop	{r4, pc}
 8000c28:	4610      	mov	r0, r2
 8000c2a:	e7fc      	b.n	8000c26 <strncmp+0x1e>

08000c2c <__ssputs_r>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	688e      	ldr	r6, [r1, #8]
 8000c32:	4682      	mov	sl, r0
 8000c34:	429e      	cmp	r6, r3
 8000c36:	460c      	mov	r4, r1
 8000c38:	4690      	mov	r8, r2
 8000c3a:	461f      	mov	r7, r3
 8000c3c:	d838      	bhi.n	8000cb0 <__ssputs_r+0x84>
 8000c3e:	898a      	ldrh	r2, [r1, #12]
 8000c40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000c44:	d032      	beq.n	8000cac <__ssputs_r+0x80>
 8000c46:	6825      	ldr	r5, [r4, #0]
 8000c48:	6909      	ldr	r1, [r1, #16]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	eba5 0901 	sub.w	r9, r5, r1
 8000c50:	6965      	ldr	r5, [r4, #20]
 8000c52:	444b      	add	r3, r9
 8000c54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000c58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000c5c:	106d      	asrs	r5, r5, #1
 8000c5e:	429d      	cmp	r5, r3
 8000c60:	bf38      	it	cc
 8000c62:	461d      	movcc	r5, r3
 8000c64:	0553      	lsls	r3, r2, #21
 8000c66:	d531      	bpl.n	8000ccc <__ssputs_r+0xa0>
 8000c68:	4629      	mov	r1, r5
 8000c6a:	f000 ffeb 	bl	8001c44 <_malloc_r>
 8000c6e:	4606      	mov	r6, r0
 8000c70:	b950      	cbnz	r0, 8000c88 <__ssputs_r+0x5c>
 8000c72:	230c      	movs	r3, #12
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f8ca 3000 	str.w	r3, [sl]
 8000c7c:	89a3      	ldrh	r3, [r4, #12]
 8000c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c82:	81a3      	strh	r3, [r4, #12]
 8000c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c88:	464a      	mov	r2, r9
 8000c8a:	6921      	ldr	r1, [r4, #16]
 8000c8c:	f000 ff66 	bl	8001b5c <memcpy>
 8000c90:	89a3      	ldrh	r3, [r4, #12]
 8000c92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c9a:	81a3      	strh	r3, [r4, #12]
 8000c9c:	6126      	str	r6, [r4, #16]
 8000c9e:	444e      	add	r6, r9
 8000ca0:	6026      	str	r6, [r4, #0]
 8000ca2:	463e      	mov	r6, r7
 8000ca4:	6165      	str	r5, [r4, #20]
 8000ca6:	eba5 0509 	sub.w	r5, r5, r9
 8000caa:	60a5      	str	r5, [r4, #8]
 8000cac:	42be      	cmp	r6, r7
 8000cae:	d900      	bls.n	8000cb2 <__ssputs_r+0x86>
 8000cb0:	463e      	mov	r6, r7
 8000cb2:	4632      	mov	r2, r6
 8000cb4:	4641      	mov	r1, r8
 8000cb6:	6820      	ldr	r0, [r4, #0]
 8000cb8:	f000 ff5e 	bl	8001b78 <memmove>
 8000cbc:	68a3      	ldr	r3, [r4, #8]
 8000cbe:	6822      	ldr	r2, [r4, #0]
 8000cc0:	1b9b      	subs	r3, r3, r6
 8000cc2:	4432      	add	r2, r6
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	60a3      	str	r3, [r4, #8]
 8000cc8:	6022      	str	r2, [r4, #0]
 8000cca:	e7db      	b.n	8000c84 <__ssputs_r+0x58>
 8000ccc:	462a      	mov	r2, r5
 8000cce:	f001 f813 	bl	8001cf8 <_realloc_r>
 8000cd2:	4606      	mov	r6, r0
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	d1e1      	bne.n	8000c9c <__ssputs_r+0x70>
 8000cd8:	4650      	mov	r0, sl
 8000cda:	6921      	ldr	r1, [r4, #16]
 8000cdc:	f000 ff66 	bl	8001bac <_free_r>
 8000ce0:	e7c7      	b.n	8000c72 <__ssputs_r+0x46>
	...

08000ce4 <_svfiprintf_r>:
 8000ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ce8:	4698      	mov	r8, r3
 8000cea:	898b      	ldrh	r3, [r1, #12]
 8000cec:	4607      	mov	r7, r0
 8000cee:	061b      	lsls	r3, r3, #24
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	4614      	mov	r4, r2
 8000cf4:	b09d      	sub	sp, #116	; 0x74
 8000cf6:	d50e      	bpl.n	8000d16 <_svfiprintf_r+0x32>
 8000cf8:	690b      	ldr	r3, [r1, #16]
 8000cfa:	b963      	cbnz	r3, 8000d16 <_svfiprintf_r+0x32>
 8000cfc:	2140      	movs	r1, #64	; 0x40
 8000cfe:	f000 ffa1 	bl	8001c44 <_malloc_r>
 8000d02:	6028      	str	r0, [r5, #0]
 8000d04:	6128      	str	r0, [r5, #16]
 8000d06:	b920      	cbnz	r0, 8000d12 <_svfiprintf_r+0x2e>
 8000d08:	230c      	movs	r3, #12
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d10:	e0d1      	b.n	8000eb6 <_svfiprintf_r+0x1d2>
 8000d12:	2340      	movs	r3, #64	; 0x40
 8000d14:	616b      	str	r3, [r5, #20]
 8000d16:	2300      	movs	r3, #0
 8000d18:	9309      	str	r3, [sp, #36]	; 0x24
 8000d1a:	2320      	movs	r3, #32
 8000d1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000d20:	2330      	movs	r3, #48	; 0x30
 8000d22:	f04f 0901 	mov.w	r9, #1
 8000d26:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d2a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000ed0 <_svfiprintf_r+0x1ec>
 8000d2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000d32:	4623      	mov	r3, r4
 8000d34:	469a      	mov	sl, r3
 8000d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d3a:	b10a      	cbz	r2, 8000d40 <_svfiprintf_r+0x5c>
 8000d3c:	2a25      	cmp	r2, #37	; 0x25
 8000d3e:	d1f9      	bne.n	8000d34 <_svfiprintf_r+0x50>
 8000d40:	ebba 0b04 	subs.w	fp, sl, r4
 8000d44:	d00b      	beq.n	8000d5e <_svfiprintf_r+0x7a>
 8000d46:	465b      	mov	r3, fp
 8000d48:	4622      	mov	r2, r4
 8000d4a:	4629      	mov	r1, r5
 8000d4c:	4638      	mov	r0, r7
 8000d4e:	f7ff ff6d 	bl	8000c2c <__ssputs_r>
 8000d52:	3001      	adds	r0, #1
 8000d54:	f000 80aa 	beq.w	8000eac <_svfiprintf_r+0x1c8>
 8000d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000d5a:	445a      	add	r2, fp
 8000d5c:	9209      	str	r2, [sp, #36]	; 0x24
 8000d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f000 80a2 	beq.w	8000eac <_svfiprintf_r+0x1c8>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d72:	f10a 0a01 	add.w	sl, sl, #1
 8000d76:	9304      	str	r3, [sp, #16]
 8000d78:	9307      	str	r3, [sp, #28]
 8000d7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000d7e:	931a      	str	r3, [sp, #104]	; 0x68
 8000d80:	4654      	mov	r4, sl
 8000d82:	2205      	movs	r2, #5
 8000d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d88:	4851      	ldr	r0, [pc, #324]	; (8000ed0 <_svfiprintf_r+0x1ec>)
 8000d8a:	f000 fed9 	bl	8001b40 <memchr>
 8000d8e:	9a04      	ldr	r2, [sp, #16]
 8000d90:	b9d8      	cbnz	r0, 8000dca <_svfiprintf_r+0xe6>
 8000d92:	06d0      	lsls	r0, r2, #27
 8000d94:	bf44      	itt	mi
 8000d96:	2320      	movmi	r3, #32
 8000d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d9c:	0711      	lsls	r1, r2, #28
 8000d9e:	bf44      	itt	mi
 8000da0:	232b      	movmi	r3, #43	; 0x2b
 8000da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000da6:	f89a 3000 	ldrb.w	r3, [sl]
 8000daa:	2b2a      	cmp	r3, #42	; 0x2a
 8000dac:	d015      	beq.n	8000dda <_svfiprintf_r+0xf6>
 8000dae:	4654      	mov	r4, sl
 8000db0:	2000      	movs	r0, #0
 8000db2:	f04f 0c0a 	mov.w	ip, #10
 8000db6:	9a07      	ldr	r2, [sp, #28]
 8000db8:	4621      	mov	r1, r4
 8000dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000dbe:	3b30      	subs	r3, #48	; 0x30
 8000dc0:	2b09      	cmp	r3, #9
 8000dc2:	d94e      	bls.n	8000e62 <_svfiprintf_r+0x17e>
 8000dc4:	b1b0      	cbz	r0, 8000df4 <_svfiprintf_r+0x110>
 8000dc6:	9207      	str	r2, [sp, #28]
 8000dc8:	e014      	b.n	8000df4 <_svfiprintf_r+0x110>
 8000dca:	eba0 0308 	sub.w	r3, r0, r8
 8000dce:	fa09 f303 	lsl.w	r3, r9, r3
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	46a2      	mov	sl, r4
 8000dd6:	9304      	str	r3, [sp, #16]
 8000dd8:	e7d2      	b.n	8000d80 <_svfiprintf_r+0x9c>
 8000dda:	9b03      	ldr	r3, [sp, #12]
 8000ddc:	1d19      	adds	r1, r3, #4
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	9103      	str	r1, [sp, #12]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	bfbb      	ittet	lt
 8000de6:	425b      	neglt	r3, r3
 8000de8:	f042 0202 	orrlt.w	r2, r2, #2
 8000dec:	9307      	strge	r3, [sp, #28]
 8000dee:	9307      	strlt	r3, [sp, #28]
 8000df0:	bfb8      	it	lt
 8000df2:	9204      	strlt	r2, [sp, #16]
 8000df4:	7823      	ldrb	r3, [r4, #0]
 8000df6:	2b2e      	cmp	r3, #46	; 0x2e
 8000df8:	d10c      	bne.n	8000e14 <_svfiprintf_r+0x130>
 8000dfa:	7863      	ldrb	r3, [r4, #1]
 8000dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8000dfe:	d135      	bne.n	8000e6c <_svfiprintf_r+0x188>
 8000e00:	9b03      	ldr	r3, [sp, #12]
 8000e02:	3402      	adds	r4, #2
 8000e04:	1d1a      	adds	r2, r3, #4
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	9203      	str	r2, [sp, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	bfb8      	it	lt
 8000e0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8000e12:	9305      	str	r3, [sp, #20]
 8000e14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000ee0 <_svfiprintf_r+0x1fc>
 8000e18:	2203      	movs	r2, #3
 8000e1a:	4650      	mov	r0, sl
 8000e1c:	7821      	ldrb	r1, [r4, #0]
 8000e1e:	f000 fe8f 	bl	8001b40 <memchr>
 8000e22:	b140      	cbz	r0, 8000e36 <_svfiprintf_r+0x152>
 8000e24:	2340      	movs	r3, #64	; 0x40
 8000e26:	eba0 000a 	sub.w	r0, r0, sl
 8000e2a:	fa03 f000 	lsl.w	r0, r3, r0
 8000e2e:	9b04      	ldr	r3, [sp, #16]
 8000e30:	3401      	adds	r4, #1
 8000e32:	4303      	orrs	r3, r0
 8000e34:	9304      	str	r3, [sp, #16]
 8000e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e3a:	2206      	movs	r2, #6
 8000e3c:	4825      	ldr	r0, [pc, #148]	; (8000ed4 <_svfiprintf_r+0x1f0>)
 8000e3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000e42:	f000 fe7d 	bl	8001b40 <memchr>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	d038      	beq.n	8000ebc <_svfiprintf_r+0x1d8>
 8000e4a:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <_svfiprintf_r+0x1f4>)
 8000e4c:	bb1b      	cbnz	r3, 8000e96 <_svfiprintf_r+0x1b2>
 8000e4e:	9b03      	ldr	r3, [sp, #12]
 8000e50:	3307      	adds	r3, #7
 8000e52:	f023 0307 	bic.w	r3, r3, #7
 8000e56:	3308      	adds	r3, #8
 8000e58:	9303      	str	r3, [sp, #12]
 8000e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e5c:	4433      	add	r3, r6
 8000e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8000e60:	e767      	b.n	8000d32 <_svfiprintf_r+0x4e>
 8000e62:	460c      	mov	r4, r1
 8000e64:	2001      	movs	r0, #1
 8000e66:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e6a:	e7a5      	b.n	8000db8 <_svfiprintf_r+0xd4>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f04f 0c0a 	mov.w	ip, #10
 8000e72:	4619      	mov	r1, r3
 8000e74:	3401      	adds	r4, #1
 8000e76:	9305      	str	r3, [sp, #20]
 8000e78:	4620      	mov	r0, r4
 8000e7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e7e:	3a30      	subs	r2, #48	; 0x30
 8000e80:	2a09      	cmp	r2, #9
 8000e82:	d903      	bls.n	8000e8c <_svfiprintf_r+0x1a8>
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0c5      	beq.n	8000e14 <_svfiprintf_r+0x130>
 8000e88:	9105      	str	r1, [sp, #20]
 8000e8a:	e7c3      	b.n	8000e14 <_svfiprintf_r+0x130>
 8000e8c:	4604      	mov	r4, r0
 8000e8e:	2301      	movs	r3, #1
 8000e90:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e94:	e7f0      	b.n	8000e78 <_svfiprintf_r+0x194>
 8000e96:	ab03      	add	r3, sp, #12
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	462a      	mov	r2, r5
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <_svfiprintf_r+0x1f8>)
 8000ea0:	a904      	add	r1, sp, #16
 8000ea2:	f3af 8000 	nop.w
 8000ea6:	1c42      	adds	r2, r0, #1
 8000ea8:	4606      	mov	r6, r0
 8000eaa:	d1d6      	bne.n	8000e5a <_svfiprintf_r+0x176>
 8000eac:	89ab      	ldrh	r3, [r5, #12]
 8000eae:	065b      	lsls	r3, r3, #25
 8000eb0:	f53f af2c 	bmi.w	8000d0c <_svfiprintf_r+0x28>
 8000eb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000eb6:	b01d      	add	sp, #116	; 0x74
 8000eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ebc:	ab03      	add	r3, sp, #12
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	462a      	mov	r2, r5
 8000ec2:	4638      	mov	r0, r7
 8000ec4:	4b05      	ldr	r3, [pc, #20]	; (8000edc <_svfiprintf_r+0x1f8>)
 8000ec6:	a904      	add	r1, sp, #16
 8000ec8:	f000 fa50 	bl	800136c <_printf_i>
 8000ecc:	e7eb      	b.n	8000ea6 <_svfiprintf_r+0x1c2>
 8000ece:	bf00      	nop
 8000ed0:	08001e6c 	.word	0x08001e6c
 8000ed4:	08001e76 	.word	0x08001e76
 8000ed8:	00000000 	.word	0x00000000
 8000edc:	08000c2d 	.word	0x08000c2d
 8000ee0:	08001e72 	.word	0x08001e72

08000ee4 <_sungetc_r>:
 8000ee4:	b538      	push	{r3, r4, r5, lr}
 8000ee6:	1c4b      	adds	r3, r1, #1
 8000ee8:	4614      	mov	r4, r2
 8000eea:	d103      	bne.n	8000ef4 <_sungetc_r+0x10>
 8000eec:	f04f 35ff 	mov.w	r5, #4294967295
 8000ef0:	4628      	mov	r0, r5
 8000ef2:	bd38      	pop	{r3, r4, r5, pc}
 8000ef4:	8993      	ldrh	r3, [r2, #12]
 8000ef6:	b2cd      	uxtb	r5, r1
 8000ef8:	f023 0320 	bic.w	r3, r3, #32
 8000efc:	8193      	strh	r3, [r2, #12]
 8000efe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000f00:	6852      	ldr	r2, [r2, #4]
 8000f02:	b18b      	cbz	r3, 8000f28 <_sungetc_r+0x44>
 8000f04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f06:	4293      	cmp	r3, r2
 8000f08:	dd08      	ble.n	8000f1c <_sungetc_r+0x38>
 8000f0a:	6823      	ldr	r3, [r4, #0]
 8000f0c:	1e5a      	subs	r2, r3, #1
 8000f0e:	6022      	str	r2, [r4, #0]
 8000f10:	f803 5c01 	strb.w	r5, [r3, #-1]
 8000f14:	6863      	ldr	r3, [r4, #4]
 8000f16:	3301      	adds	r3, #1
 8000f18:	6063      	str	r3, [r4, #4]
 8000f1a:	e7e9      	b.n	8000ef0 <_sungetc_r+0xc>
 8000f1c:	4621      	mov	r1, r4
 8000f1e:	f000 fdd5 	bl	8001acc <__submore>
 8000f22:	2800      	cmp	r0, #0
 8000f24:	d0f1      	beq.n	8000f0a <_sungetc_r+0x26>
 8000f26:	e7e1      	b.n	8000eec <_sungetc_r+0x8>
 8000f28:	6921      	ldr	r1, [r4, #16]
 8000f2a:	6823      	ldr	r3, [r4, #0]
 8000f2c:	b151      	cbz	r1, 8000f44 <_sungetc_r+0x60>
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d208      	bcs.n	8000f44 <_sungetc_r+0x60>
 8000f32:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8000f36:	42a9      	cmp	r1, r5
 8000f38:	d104      	bne.n	8000f44 <_sungetc_r+0x60>
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	3201      	adds	r2, #1
 8000f3e:	6023      	str	r3, [r4, #0]
 8000f40:	6062      	str	r2, [r4, #4]
 8000f42:	e7d5      	b.n	8000ef0 <_sungetc_r+0xc>
 8000f44:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8000f48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f4c:	6363      	str	r3, [r4, #52]	; 0x34
 8000f4e:	2303      	movs	r3, #3
 8000f50:	63a3      	str	r3, [r4, #56]	; 0x38
 8000f52:	4623      	mov	r3, r4
 8000f54:	f803 5f46 	strb.w	r5, [r3, #70]!
 8000f58:	6023      	str	r3, [r4, #0]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e7dc      	b.n	8000f18 <_sungetc_r+0x34>

08000f5e <__ssrefill_r>:
 8000f5e:	b510      	push	{r4, lr}
 8000f60:	460c      	mov	r4, r1
 8000f62:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8000f64:	b169      	cbz	r1, 8000f82 <__ssrefill_r+0x24>
 8000f66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d001      	beq.n	8000f72 <__ssrefill_r+0x14>
 8000f6e:	f000 fe1d 	bl	8001bac <_free_r>
 8000f72:	2000      	movs	r0, #0
 8000f74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f76:	6360      	str	r0, [r4, #52]	; 0x34
 8000f78:	6063      	str	r3, [r4, #4]
 8000f7a:	b113      	cbz	r3, 8000f82 <__ssrefill_r+0x24>
 8000f7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000f7e:	6023      	str	r3, [r4, #0]
 8000f80:	bd10      	pop	{r4, pc}
 8000f82:	6923      	ldr	r3, [r4, #16]
 8000f84:	f04f 30ff 	mov.w	r0, #4294967295
 8000f88:	6023      	str	r3, [r4, #0]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	6063      	str	r3, [r4, #4]
 8000f8e:	89a3      	ldrh	r3, [r4, #12]
 8000f90:	f043 0320 	orr.w	r3, r3, #32
 8000f94:	81a3      	strh	r3, [r4, #12]
 8000f96:	e7f3      	b.n	8000f80 <__ssrefill_r+0x22>

08000f98 <__ssvfiscanf_r>:
 8000f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f9c:	460c      	mov	r4, r1
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	4606      	mov	r6, r0
 8000fa2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8000fa6:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8000faa:	49b3      	ldr	r1, [pc, #716]	; (8001278 <__ssvfiscanf_r+0x2e0>)
 8000fac:	f10d 0804 	add.w	r8, sp, #4
 8000fb0:	91a0      	str	r1, [sp, #640]	; 0x280
 8000fb2:	49b2      	ldr	r1, [pc, #712]	; (800127c <__ssvfiscanf_r+0x2e4>)
 8000fb4:	4fb2      	ldr	r7, [pc, #712]	; (8001280 <__ssvfiscanf_r+0x2e8>)
 8000fb6:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 8001284 <__ssvfiscanf_r+0x2ec>
 8000fba:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8000fbe:	91a1      	str	r1, [sp, #644]	; 0x284
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	f892 a000 	ldrb.w	sl, [r2]
 8000fc6:	f1ba 0f00 	cmp.w	sl, #0
 8000fca:	f000 8153 	beq.w	8001274 <__ssvfiscanf_r+0x2dc>
 8000fce:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8000fd2:	1c55      	adds	r5, r2, #1
 8000fd4:	f013 0308 	ands.w	r3, r3, #8
 8000fd8:	d019      	beq.n	800100e <__ssvfiscanf_r+0x76>
 8000fda:	6863      	ldr	r3, [r4, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	dd0f      	ble.n	8001000 <__ssvfiscanf_r+0x68>
 8000fe0:	6823      	ldr	r3, [r4, #0]
 8000fe2:	781a      	ldrb	r2, [r3, #0]
 8000fe4:	5cba      	ldrb	r2, [r7, r2]
 8000fe6:	0712      	lsls	r2, r2, #28
 8000fe8:	d401      	bmi.n	8000fee <__ssvfiscanf_r+0x56>
 8000fea:	462a      	mov	r2, r5
 8000fec:	e7e9      	b.n	8000fc2 <__ssvfiscanf_r+0x2a>
 8000fee:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	3201      	adds	r2, #1
 8000ff4:	9245      	str	r2, [sp, #276]	; 0x114
 8000ff6:	6862      	ldr	r2, [r4, #4]
 8000ff8:	6023      	str	r3, [r4, #0]
 8000ffa:	3a01      	subs	r2, #1
 8000ffc:	6062      	str	r2, [r4, #4]
 8000ffe:	e7ec      	b.n	8000fda <__ssvfiscanf_r+0x42>
 8001000:	4621      	mov	r1, r4
 8001002:	4630      	mov	r0, r6
 8001004:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8001006:	4798      	blx	r3
 8001008:	2800      	cmp	r0, #0
 800100a:	d0e9      	beq.n	8000fe0 <__ssvfiscanf_r+0x48>
 800100c:	e7ed      	b.n	8000fea <__ssvfiscanf_r+0x52>
 800100e:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8001012:	f040 8086 	bne.w	8001122 <__ssvfiscanf_r+0x18a>
 8001016:	9341      	str	r3, [sp, #260]	; 0x104
 8001018:	9343      	str	r3, [sp, #268]	; 0x10c
 800101a:	7853      	ldrb	r3, [r2, #1]
 800101c:	2b2a      	cmp	r3, #42	; 0x2a
 800101e:	bf04      	itt	eq
 8001020:	2310      	moveq	r3, #16
 8001022:	1c95      	addeq	r5, r2, #2
 8001024:	f04f 020a 	mov.w	r2, #10
 8001028:	bf08      	it	eq
 800102a:	9341      	streq	r3, [sp, #260]	; 0x104
 800102c:	46ab      	mov	fp, r5
 800102e:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8001032:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8001036:	2b09      	cmp	r3, #9
 8001038:	d91d      	bls.n	8001076 <__ssvfiscanf_r+0xde>
 800103a:	2203      	movs	r2, #3
 800103c:	4891      	ldr	r0, [pc, #580]	; (8001284 <__ssvfiscanf_r+0x2ec>)
 800103e:	f000 fd7f 	bl	8001b40 <memchr>
 8001042:	b140      	cbz	r0, 8001056 <__ssvfiscanf_r+0xbe>
 8001044:	2301      	movs	r3, #1
 8001046:	465d      	mov	r5, fp
 8001048:	eba0 0009 	sub.w	r0, r0, r9
 800104c:	fa03 f000 	lsl.w	r0, r3, r0
 8001050:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001052:	4318      	orrs	r0, r3
 8001054:	9041      	str	r0, [sp, #260]	; 0x104
 8001056:	f815 3b01 	ldrb.w	r3, [r5], #1
 800105a:	2b78      	cmp	r3, #120	; 0x78
 800105c:	d806      	bhi.n	800106c <__ssvfiscanf_r+0xd4>
 800105e:	2b57      	cmp	r3, #87	; 0x57
 8001060:	d810      	bhi.n	8001084 <__ssvfiscanf_r+0xec>
 8001062:	2b25      	cmp	r3, #37	; 0x25
 8001064:	d05d      	beq.n	8001122 <__ssvfiscanf_r+0x18a>
 8001066:	d857      	bhi.n	8001118 <__ssvfiscanf_r+0x180>
 8001068:	2b00      	cmp	r3, #0
 800106a:	d075      	beq.n	8001158 <__ssvfiscanf_r+0x1c0>
 800106c:	2303      	movs	r3, #3
 800106e:	9347      	str	r3, [sp, #284]	; 0x11c
 8001070:	230a      	movs	r3, #10
 8001072:	9342      	str	r3, [sp, #264]	; 0x108
 8001074:	e082      	b.n	800117c <__ssvfiscanf_r+0x1e4>
 8001076:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8001078:	465d      	mov	r5, fp
 800107a:	fb02 1303 	mla	r3, r2, r3, r1
 800107e:	3b30      	subs	r3, #48	; 0x30
 8001080:	9343      	str	r3, [sp, #268]	; 0x10c
 8001082:	e7d3      	b.n	800102c <__ssvfiscanf_r+0x94>
 8001084:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8001088:	2a20      	cmp	r2, #32
 800108a:	d8ef      	bhi.n	800106c <__ssvfiscanf_r+0xd4>
 800108c:	a101      	add	r1, pc, #4	; (adr r1, 8001094 <__ssvfiscanf_r+0xfc>)
 800108e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8001092:	bf00      	nop
 8001094:	08001167 	.word	0x08001167
 8001098:	0800106d 	.word	0x0800106d
 800109c:	0800106d 	.word	0x0800106d
 80010a0:	080011c5 	.word	0x080011c5
 80010a4:	0800106d 	.word	0x0800106d
 80010a8:	0800106d 	.word	0x0800106d
 80010ac:	0800106d 	.word	0x0800106d
 80010b0:	0800106d 	.word	0x0800106d
 80010b4:	0800106d 	.word	0x0800106d
 80010b8:	0800106d 	.word	0x0800106d
 80010bc:	0800106d 	.word	0x0800106d
 80010c0:	080011db 	.word	0x080011db
 80010c4:	080011b1 	.word	0x080011b1
 80010c8:	0800111f 	.word	0x0800111f
 80010cc:	0800111f 	.word	0x0800111f
 80010d0:	0800111f 	.word	0x0800111f
 80010d4:	0800106d 	.word	0x0800106d
 80010d8:	080011b5 	.word	0x080011b5
 80010dc:	0800106d 	.word	0x0800106d
 80010e0:	0800106d 	.word	0x0800106d
 80010e4:	0800106d 	.word	0x0800106d
 80010e8:	0800106d 	.word	0x0800106d
 80010ec:	080011eb 	.word	0x080011eb
 80010f0:	080011bd 	.word	0x080011bd
 80010f4:	0800115f 	.word	0x0800115f
 80010f8:	0800106d 	.word	0x0800106d
 80010fc:	0800106d 	.word	0x0800106d
 8001100:	080011e7 	.word	0x080011e7
 8001104:	0800106d 	.word	0x0800106d
 8001108:	080011b1 	.word	0x080011b1
 800110c:	0800106d 	.word	0x0800106d
 8001110:	0800106d 	.word	0x0800106d
 8001114:	08001167 	.word	0x08001167
 8001118:	3b45      	subs	r3, #69	; 0x45
 800111a:	2b02      	cmp	r3, #2
 800111c:	d8a6      	bhi.n	800106c <__ssvfiscanf_r+0xd4>
 800111e:	2305      	movs	r3, #5
 8001120:	e02b      	b.n	800117a <__ssvfiscanf_r+0x1e2>
 8001122:	6863      	ldr	r3, [r4, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	dd0d      	ble.n	8001144 <__ssvfiscanf_r+0x1ac>
 8001128:	6823      	ldr	r3, [r4, #0]
 800112a:	781a      	ldrb	r2, [r3, #0]
 800112c:	4552      	cmp	r2, sl
 800112e:	f040 80a1 	bne.w	8001274 <__ssvfiscanf_r+0x2dc>
 8001132:	3301      	adds	r3, #1
 8001134:	6862      	ldr	r2, [r4, #4]
 8001136:	6023      	str	r3, [r4, #0]
 8001138:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800113a:	3a01      	subs	r2, #1
 800113c:	3301      	adds	r3, #1
 800113e:	6062      	str	r2, [r4, #4]
 8001140:	9345      	str	r3, [sp, #276]	; 0x114
 8001142:	e752      	b.n	8000fea <__ssvfiscanf_r+0x52>
 8001144:	4621      	mov	r1, r4
 8001146:	4630      	mov	r0, r6
 8001148:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800114a:	4798      	blx	r3
 800114c:	2800      	cmp	r0, #0
 800114e:	d0eb      	beq.n	8001128 <__ssvfiscanf_r+0x190>
 8001150:	9844      	ldr	r0, [sp, #272]	; 0x110
 8001152:	2800      	cmp	r0, #0
 8001154:	f040 8084 	bne.w	8001260 <__ssvfiscanf_r+0x2c8>
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	e086      	b.n	800126c <__ssvfiscanf_r+0x2d4>
 800115e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8001160:	f042 0220 	orr.w	r2, r2, #32
 8001164:	9241      	str	r2, [sp, #260]	; 0x104
 8001166:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8001168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800116c:	9241      	str	r2, [sp, #260]	; 0x104
 800116e:	2210      	movs	r2, #16
 8001170:	2b6f      	cmp	r3, #111	; 0x6f
 8001172:	bf34      	ite	cc
 8001174:	2303      	movcc	r3, #3
 8001176:	2304      	movcs	r3, #4
 8001178:	9242      	str	r2, [sp, #264]	; 0x108
 800117a:	9347      	str	r3, [sp, #284]	; 0x11c
 800117c:	6863      	ldr	r3, [r4, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	dd41      	ble.n	8001206 <__ssvfiscanf_r+0x26e>
 8001182:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8001184:	0659      	lsls	r1, r3, #25
 8001186:	d404      	bmi.n	8001192 <__ssvfiscanf_r+0x1fa>
 8001188:	6823      	ldr	r3, [r4, #0]
 800118a:	781a      	ldrb	r2, [r3, #0]
 800118c:	5cba      	ldrb	r2, [r7, r2]
 800118e:	0712      	lsls	r2, r2, #28
 8001190:	d440      	bmi.n	8001214 <__ssvfiscanf_r+0x27c>
 8001192:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8001194:	2b02      	cmp	r3, #2
 8001196:	dc4f      	bgt.n	8001238 <__ssvfiscanf_r+0x2a0>
 8001198:	466b      	mov	r3, sp
 800119a:	4622      	mov	r2, r4
 800119c:	4630      	mov	r0, r6
 800119e:	a941      	add	r1, sp, #260	; 0x104
 80011a0:	f000 fa0a 	bl	80015b8 <_scanf_chars>
 80011a4:	2801      	cmp	r0, #1
 80011a6:	d065      	beq.n	8001274 <__ssvfiscanf_r+0x2dc>
 80011a8:	2802      	cmp	r0, #2
 80011aa:	f47f af1e 	bne.w	8000fea <__ssvfiscanf_r+0x52>
 80011ae:	e7cf      	b.n	8001150 <__ssvfiscanf_r+0x1b8>
 80011b0:	220a      	movs	r2, #10
 80011b2:	e7dd      	b.n	8001170 <__ssvfiscanf_r+0x1d8>
 80011b4:	2300      	movs	r3, #0
 80011b6:	9342      	str	r3, [sp, #264]	; 0x108
 80011b8:	2303      	movs	r3, #3
 80011ba:	e7de      	b.n	800117a <__ssvfiscanf_r+0x1e2>
 80011bc:	2308      	movs	r3, #8
 80011be:	9342      	str	r3, [sp, #264]	; 0x108
 80011c0:	2304      	movs	r3, #4
 80011c2:	e7da      	b.n	800117a <__ssvfiscanf_r+0x1e2>
 80011c4:	4629      	mov	r1, r5
 80011c6:	4640      	mov	r0, r8
 80011c8:	f000 fb40 	bl	800184c <__sccl>
 80011cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80011ce:	4605      	mov	r5, r0
 80011d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011d4:	9341      	str	r3, [sp, #260]	; 0x104
 80011d6:	2301      	movs	r3, #1
 80011d8:	e7cf      	b.n	800117a <__ssvfiscanf_r+0x1e2>
 80011da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80011dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011e0:	9341      	str	r3, [sp, #260]	; 0x104
 80011e2:	2300      	movs	r3, #0
 80011e4:	e7c9      	b.n	800117a <__ssvfiscanf_r+0x1e2>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e7c7      	b.n	800117a <__ssvfiscanf_r+0x1e2>
 80011ea:	9841      	ldr	r0, [sp, #260]	; 0x104
 80011ec:	06c3      	lsls	r3, r0, #27
 80011ee:	f53f aefc 	bmi.w	8000fea <__ssvfiscanf_r+0x52>
 80011f2:	9b00      	ldr	r3, [sp, #0]
 80011f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80011f6:	1d19      	adds	r1, r3, #4
 80011f8:	9100      	str	r1, [sp, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	07c0      	lsls	r0, r0, #31
 80011fe:	bf4c      	ite	mi
 8001200:	801a      	strhmi	r2, [r3, #0]
 8001202:	601a      	strpl	r2, [r3, #0]
 8001204:	e6f1      	b.n	8000fea <__ssvfiscanf_r+0x52>
 8001206:	4621      	mov	r1, r4
 8001208:	4630      	mov	r0, r6
 800120a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800120c:	4798      	blx	r3
 800120e:	2800      	cmp	r0, #0
 8001210:	d0b7      	beq.n	8001182 <__ssvfiscanf_r+0x1ea>
 8001212:	e79d      	b.n	8001150 <__ssvfiscanf_r+0x1b8>
 8001214:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8001216:	3201      	adds	r2, #1
 8001218:	9245      	str	r2, [sp, #276]	; 0x114
 800121a:	6862      	ldr	r2, [r4, #4]
 800121c:	3a01      	subs	r2, #1
 800121e:	2a00      	cmp	r2, #0
 8001220:	6062      	str	r2, [r4, #4]
 8001222:	dd02      	ble.n	800122a <__ssvfiscanf_r+0x292>
 8001224:	3301      	adds	r3, #1
 8001226:	6023      	str	r3, [r4, #0]
 8001228:	e7ae      	b.n	8001188 <__ssvfiscanf_r+0x1f0>
 800122a:	4621      	mov	r1, r4
 800122c:	4630      	mov	r0, r6
 800122e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8001230:	4798      	blx	r3
 8001232:	2800      	cmp	r0, #0
 8001234:	d0a8      	beq.n	8001188 <__ssvfiscanf_r+0x1f0>
 8001236:	e78b      	b.n	8001150 <__ssvfiscanf_r+0x1b8>
 8001238:	2b04      	cmp	r3, #4
 800123a:	dc06      	bgt.n	800124a <__ssvfiscanf_r+0x2b2>
 800123c:	466b      	mov	r3, sp
 800123e:	4622      	mov	r2, r4
 8001240:	4630      	mov	r0, r6
 8001242:	a941      	add	r1, sp, #260	; 0x104
 8001244:	f000 fa10 	bl	8001668 <_scanf_i>
 8001248:	e7ac      	b.n	80011a4 <__ssvfiscanf_r+0x20c>
 800124a:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <__ssvfiscanf_r+0x2f0>)
 800124c:	2b00      	cmp	r3, #0
 800124e:	f43f aecc 	beq.w	8000fea <__ssvfiscanf_r+0x52>
 8001252:	466b      	mov	r3, sp
 8001254:	4622      	mov	r2, r4
 8001256:	4630      	mov	r0, r6
 8001258:	a941      	add	r1, sp, #260	; 0x104
 800125a:	f3af 8000 	nop.w
 800125e:	e7a1      	b.n	80011a4 <__ssvfiscanf_r+0x20c>
 8001260:	89a3      	ldrh	r3, [r4, #12]
 8001262:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001266:	bf18      	it	ne
 8001268:	f04f 30ff 	movne.w	r0, #4294967295
 800126c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8001270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001274:	9844      	ldr	r0, [sp, #272]	; 0x110
 8001276:	e7f9      	b.n	800126c <__ssvfiscanf_r+0x2d4>
 8001278:	08000ee5 	.word	0x08000ee5
 800127c:	08000f5f 	.word	0x08000f5f
 8001280:	08001ebb 	.word	0x08001ebb
 8001284:	08001e72 	.word	0x08001e72
 8001288:	00000000 	.word	0x00000000

0800128c <_printf_common>:
 800128c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001290:	4616      	mov	r6, r2
 8001292:	4699      	mov	r9, r3
 8001294:	688a      	ldr	r2, [r1, #8]
 8001296:	690b      	ldr	r3, [r1, #16]
 8001298:	4607      	mov	r7, r0
 800129a:	4293      	cmp	r3, r2
 800129c:	bfb8      	it	lt
 800129e:	4613      	movlt	r3, r2
 80012a0:	6033      	str	r3, [r6, #0]
 80012a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80012a6:	460c      	mov	r4, r1
 80012a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80012ac:	b10a      	cbz	r2, 80012b2 <_printf_common+0x26>
 80012ae:	3301      	adds	r3, #1
 80012b0:	6033      	str	r3, [r6, #0]
 80012b2:	6823      	ldr	r3, [r4, #0]
 80012b4:	0699      	lsls	r1, r3, #26
 80012b6:	bf42      	ittt	mi
 80012b8:	6833      	ldrmi	r3, [r6, #0]
 80012ba:	3302      	addmi	r3, #2
 80012bc:	6033      	strmi	r3, [r6, #0]
 80012be:	6825      	ldr	r5, [r4, #0]
 80012c0:	f015 0506 	ands.w	r5, r5, #6
 80012c4:	d106      	bne.n	80012d4 <_printf_common+0x48>
 80012c6:	f104 0a19 	add.w	sl, r4, #25
 80012ca:	68e3      	ldr	r3, [r4, #12]
 80012cc:	6832      	ldr	r2, [r6, #0]
 80012ce:	1a9b      	subs	r3, r3, r2
 80012d0:	42ab      	cmp	r3, r5
 80012d2:	dc28      	bgt.n	8001326 <_printf_common+0x9a>
 80012d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80012d8:	1e13      	subs	r3, r2, #0
 80012da:	6822      	ldr	r2, [r4, #0]
 80012dc:	bf18      	it	ne
 80012de:	2301      	movne	r3, #1
 80012e0:	0692      	lsls	r2, r2, #26
 80012e2:	d42d      	bmi.n	8001340 <_printf_common+0xb4>
 80012e4:	4649      	mov	r1, r9
 80012e6:	4638      	mov	r0, r7
 80012e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80012ec:	47c0      	blx	r8
 80012ee:	3001      	adds	r0, #1
 80012f0:	d020      	beq.n	8001334 <_printf_common+0xa8>
 80012f2:	6823      	ldr	r3, [r4, #0]
 80012f4:	68e5      	ldr	r5, [r4, #12]
 80012f6:	f003 0306 	and.w	r3, r3, #6
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	bf18      	it	ne
 80012fe:	2500      	movne	r5, #0
 8001300:	6832      	ldr	r2, [r6, #0]
 8001302:	f04f 0600 	mov.w	r6, #0
 8001306:	68a3      	ldr	r3, [r4, #8]
 8001308:	bf08      	it	eq
 800130a:	1aad      	subeq	r5, r5, r2
 800130c:	6922      	ldr	r2, [r4, #16]
 800130e:	bf08      	it	eq
 8001310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001314:	4293      	cmp	r3, r2
 8001316:	bfc4      	itt	gt
 8001318:	1a9b      	subgt	r3, r3, r2
 800131a:	18ed      	addgt	r5, r5, r3
 800131c:	341a      	adds	r4, #26
 800131e:	42b5      	cmp	r5, r6
 8001320:	d11a      	bne.n	8001358 <_printf_common+0xcc>
 8001322:	2000      	movs	r0, #0
 8001324:	e008      	b.n	8001338 <_printf_common+0xac>
 8001326:	2301      	movs	r3, #1
 8001328:	4652      	mov	r2, sl
 800132a:	4649      	mov	r1, r9
 800132c:	4638      	mov	r0, r7
 800132e:	47c0      	blx	r8
 8001330:	3001      	adds	r0, #1
 8001332:	d103      	bne.n	800133c <_printf_common+0xb0>
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800133c:	3501      	adds	r5, #1
 800133e:	e7c4      	b.n	80012ca <_printf_common+0x3e>
 8001340:	2030      	movs	r0, #48	; 0x30
 8001342:	18e1      	adds	r1, r4, r3
 8001344:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800134e:	4422      	add	r2, r4
 8001350:	3302      	adds	r3, #2
 8001352:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001356:	e7c5      	b.n	80012e4 <_printf_common+0x58>
 8001358:	2301      	movs	r3, #1
 800135a:	4622      	mov	r2, r4
 800135c:	4649      	mov	r1, r9
 800135e:	4638      	mov	r0, r7
 8001360:	47c0      	blx	r8
 8001362:	3001      	adds	r0, #1
 8001364:	d0e6      	beq.n	8001334 <_printf_common+0xa8>
 8001366:	3601      	adds	r6, #1
 8001368:	e7d9      	b.n	800131e <_printf_common+0x92>
	...

0800136c <_printf_i>:
 800136c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001370:	460c      	mov	r4, r1
 8001372:	7e27      	ldrb	r7, [r4, #24]
 8001374:	4691      	mov	r9, r2
 8001376:	2f78      	cmp	r7, #120	; 0x78
 8001378:	4680      	mov	r8, r0
 800137a:	469a      	mov	sl, r3
 800137c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800137e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001382:	d807      	bhi.n	8001394 <_printf_i+0x28>
 8001384:	2f62      	cmp	r7, #98	; 0x62
 8001386:	d80a      	bhi.n	800139e <_printf_i+0x32>
 8001388:	2f00      	cmp	r7, #0
 800138a:	f000 80d9 	beq.w	8001540 <_printf_i+0x1d4>
 800138e:	2f58      	cmp	r7, #88	; 0x58
 8001390:	f000 80a4 	beq.w	80014dc <_printf_i+0x170>
 8001394:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001398:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800139c:	e03a      	b.n	8001414 <_printf_i+0xa8>
 800139e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80013a2:	2b15      	cmp	r3, #21
 80013a4:	d8f6      	bhi.n	8001394 <_printf_i+0x28>
 80013a6:	a001      	add	r0, pc, #4	; (adr r0, 80013ac <_printf_i+0x40>)
 80013a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80013ac:	08001405 	.word	0x08001405
 80013b0:	08001419 	.word	0x08001419
 80013b4:	08001395 	.word	0x08001395
 80013b8:	08001395 	.word	0x08001395
 80013bc:	08001395 	.word	0x08001395
 80013c0:	08001395 	.word	0x08001395
 80013c4:	08001419 	.word	0x08001419
 80013c8:	08001395 	.word	0x08001395
 80013cc:	08001395 	.word	0x08001395
 80013d0:	08001395 	.word	0x08001395
 80013d4:	08001395 	.word	0x08001395
 80013d8:	08001527 	.word	0x08001527
 80013dc:	08001449 	.word	0x08001449
 80013e0:	08001509 	.word	0x08001509
 80013e4:	08001395 	.word	0x08001395
 80013e8:	08001395 	.word	0x08001395
 80013ec:	08001549 	.word	0x08001549
 80013f0:	08001395 	.word	0x08001395
 80013f4:	08001449 	.word	0x08001449
 80013f8:	08001395 	.word	0x08001395
 80013fc:	08001395 	.word	0x08001395
 8001400:	08001511 	.word	0x08001511
 8001404:	680b      	ldr	r3, [r1, #0]
 8001406:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800140a:	1d1a      	adds	r2, r3, #4
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	600a      	str	r2, [r1, #0]
 8001410:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001414:	2301      	movs	r3, #1
 8001416:	e0a4      	b.n	8001562 <_printf_i+0x1f6>
 8001418:	6825      	ldr	r5, [r4, #0]
 800141a:	6808      	ldr	r0, [r1, #0]
 800141c:	062e      	lsls	r6, r5, #24
 800141e:	f100 0304 	add.w	r3, r0, #4
 8001422:	d50a      	bpl.n	800143a <_printf_i+0xce>
 8001424:	6805      	ldr	r5, [r0, #0]
 8001426:	600b      	str	r3, [r1, #0]
 8001428:	2d00      	cmp	r5, #0
 800142a:	da03      	bge.n	8001434 <_printf_i+0xc8>
 800142c:	232d      	movs	r3, #45	; 0x2d
 800142e:	426d      	negs	r5, r5
 8001430:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001434:	230a      	movs	r3, #10
 8001436:	485e      	ldr	r0, [pc, #376]	; (80015b0 <_printf_i+0x244>)
 8001438:	e019      	b.n	800146e <_printf_i+0x102>
 800143a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800143e:	6805      	ldr	r5, [r0, #0]
 8001440:	600b      	str	r3, [r1, #0]
 8001442:	bf18      	it	ne
 8001444:	b22d      	sxthne	r5, r5
 8001446:	e7ef      	b.n	8001428 <_printf_i+0xbc>
 8001448:	680b      	ldr	r3, [r1, #0]
 800144a:	6825      	ldr	r5, [r4, #0]
 800144c:	1d18      	adds	r0, r3, #4
 800144e:	6008      	str	r0, [r1, #0]
 8001450:	0628      	lsls	r0, r5, #24
 8001452:	d501      	bpl.n	8001458 <_printf_i+0xec>
 8001454:	681d      	ldr	r5, [r3, #0]
 8001456:	e002      	b.n	800145e <_printf_i+0xf2>
 8001458:	0669      	lsls	r1, r5, #25
 800145a:	d5fb      	bpl.n	8001454 <_printf_i+0xe8>
 800145c:	881d      	ldrh	r5, [r3, #0]
 800145e:	2f6f      	cmp	r7, #111	; 0x6f
 8001460:	bf0c      	ite	eq
 8001462:	2308      	moveq	r3, #8
 8001464:	230a      	movne	r3, #10
 8001466:	4852      	ldr	r0, [pc, #328]	; (80015b0 <_printf_i+0x244>)
 8001468:	2100      	movs	r1, #0
 800146a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800146e:	6866      	ldr	r6, [r4, #4]
 8001470:	2e00      	cmp	r6, #0
 8001472:	bfa8      	it	ge
 8001474:	6821      	ldrge	r1, [r4, #0]
 8001476:	60a6      	str	r6, [r4, #8]
 8001478:	bfa4      	itt	ge
 800147a:	f021 0104 	bicge.w	r1, r1, #4
 800147e:	6021      	strge	r1, [r4, #0]
 8001480:	b90d      	cbnz	r5, 8001486 <_printf_i+0x11a>
 8001482:	2e00      	cmp	r6, #0
 8001484:	d04d      	beq.n	8001522 <_printf_i+0x1b6>
 8001486:	4616      	mov	r6, r2
 8001488:	fbb5 f1f3 	udiv	r1, r5, r3
 800148c:	fb03 5711 	mls	r7, r3, r1, r5
 8001490:	5dc7      	ldrb	r7, [r0, r7]
 8001492:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001496:	462f      	mov	r7, r5
 8001498:	42bb      	cmp	r3, r7
 800149a:	460d      	mov	r5, r1
 800149c:	d9f4      	bls.n	8001488 <_printf_i+0x11c>
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d10b      	bne.n	80014ba <_printf_i+0x14e>
 80014a2:	6823      	ldr	r3, [r4, #0]
 80014a4:	07df      	lsls	r7, r3, #31
 80014a6:	d508      	bpl.n	80014ba <_printf_i+0x14e>
 80014a8:	6923      	ldr	r3, [r4, #16]
 80014aa:	6861      	ldr	r1, [r4, #4]
 80014ac:	4299      	cmp	r1, r3
 80014ae:	bfde      	ittt	le
 80014b0:	2330      	movle	r3, #48	; 0x30
 80014b2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80014b6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80014ba:	1b92      	subs	r2, r2, r6
 80014bc:	6122      	str	r2, [r4, #16]
 80014be:	464b      	mov	r3, r9
 80014c0:	4621      	mov	r1, r4
 80014c2:	4640      	mov	r0, r8
 80014c4:	f8cd a000 	str.w	sl, [sp]
 80014c8:	aa03      	add	r2, sp, #12
 80014ca:	f7ff fedf 	bl	800128c <_printf_common>
 80014ce:	3001      	adds	r0, #1
 80014d0:	d14c      	bne.n	800156c <_printf_i+0x200>
 80014d2:	f04f 30ff 	mov.w	r0, #4294967295
 80014d6:	b004      	add	sp, #16
 80014d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014dc:	4834      	ldr	r0, [pc, #208]	; (80015b0 <_printf_i+0x244>)
 80014de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80014e2:	680e      	ldr	r6, [r1, #0]
 80014e4:	6823      	ldr	r3, [r4, #0]
 80014e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80014ea:	061f      	lsls	r7, r3, #24
 80014ec:	600e      	str	r6, [r1, #0]
 80014ee:	d514      	bpl.n	800151a <_printf_i+0x1ae>
 80014f0:	07d9      	lsls	r1, r3, #31
 80014f2:	bf44      	itt	mi
 80014f4:	f043 0320 	orrmi.w	r3, r3, #32
 80014f8:	6023      	strmi	r3, [r4, #0]
 80014fa:	b91d      	cbnz	r5, 8001504 <_printf_i+0x198>
 80014fc:	6823      	ldr	r3, [r4, #0]
 80014fe:	f023 0320 	bic.w	r3, r3, #32
 8001502:	6023      	str	r3, [r4, #0]
 8001504:	2310      	movs	r3, #16
 8001506:	e7af      	b.n	8001468 <_printf_i+0xfc>
 8001508:	6823      	ldr	r3, [r4, #0]
 800150a:	f043 0320 	orr.w	r3, r3, #32
 800150e:	6023      	str	r3, [r4, #0]
 8001510:	2378      	movs	r3, #120	; 0x78
 8001512:	4828      	ldr	r0, [pc, #160]	; (80015b4 <_printf_i+0x248>)
 8001514:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001518:	e7e3      	b.n	80014e2 <_printf_i+0x176>
 800151a:	065e      	lsls	r6, r3, #25
 800151c:	bf48      	it	mi
 800151e:	b2ad      	uxthmi	r5, r5
 8001520:	e7e6      	b.n	80014f0 <_printf_i+0x184>
 8001522:	4616      	mov	r6, r2
 8001524:	e7bb      	b.n	800149e <_printf_i+0x132>
 8001526:	680b      	ldr	r3, [r1, #0]
 8001528:	6826      	ldr	r6, [r4, #0]
 800152a:	1d1d      	adds	r5, r3, #4
 800152c:	6960      	ldr	r0, [r4, #20]
 800152e:	600d      	str	r5, [r1, #0]
 8001530:	0635      	lsls	r5, r6, #24
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	d501      	bpl.n	800153a <_printf_i+0x1ce>
 8001536:	6018      	str	r0, [r3, #0]
 8001538:	e002      	b.n	8001540 <_printf_i+0x1d4>
 800153a:	0671      	lsls	r1, r6, #25
 800153c:	d5fb      	bpl.n	8001536 <_printf_i+0x1ca>
 800153e:	8018      	strh	r0, [r3, #0]
 8001540:	2300      	movs	r3, #0
 8001542:	4616      	mov	r6, r2
 8001544:	6123      	str	r3, [r4, #16]
 8001546:	e7ba      	b.n	80014be <_printf_i+0x152>
 8001548:	680b      	ldr	r3, [r1, #0]
 800154a:	1d1a      	adds	r2, r3, #4
 800154c:	600a      	str	r2, [r1, #0]
 800154e:	681e      	ldr	r6, [r3, #0]
 8001550:	2100      	movs	r1, #0
 8001552:	4630      	mov	r0, r6
 8001554:	6862      	ldr	r2, [r4, #4]
 8001556:	f000 faf3 	bl	8001b40 <memchr>
 800155a:	b108      	cbz	r0, 8001560 <_printf_i+0x1f4>
 800155c:	1b80      	subs	r0, r0, r6
 800155e:	6060      	str	r0, [r4, #4]
 8001560:	6863      	ldr	r3, [r4, #4]
 8001562:	6123      	str	r3, [r4, #16]
 8001564:	2300      	movs	r3, #0
 8001566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800156a:	e7a8      	b.n	80014be <_printf_i+0x152>
 800156c:	4632      	mov	r2, r6
 800156e:	4649      	mov	r1, r9
 8001570:	4640      	mov	r0, r8
 8001572:	6923      	ldr	r3, [r4, #16]
 8001574:	47d0      	blx	sl
 8001576:	3001      	adds	r0, #1
 8001578:	d0ab      	beq.n	80014d2 <_printf_i+0x166>
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	079b      	lsls	r3, r3, #30
 800157e:	d413      	bmi.n	80015a8 <_printf_i+0x23c>
 8001580:	68e0      	ldr	r0, [r4, #12]
 8001582:	9b03      	ldr	r3, [sp, #12]
 8001584:	4298      	cmp	r0, r3
 8001586:	bfb8      	it	lt
 8001588:	4618      	movlt	r0, r3
 800158a:	e7a4      	b.n	80014d6 <_printf_i+0x16a>
 800158c:	2301      	movs	r3, #1
 800158e:	4632      	mov	r2, r6
 8001590:	4649      	mov	r1, r9
 8001592:	4640      	mov	r0, r8
 8001594:	47d0      	blx	sl
 8001596:	3001      	adds	r0, #1
 8001598:	d09b      	beq.n	80014d2 <_printf_i+0x166>
 800159a:	3501      	adds	r5, #1
 800159c:	68e3      	ldr	r3, [r4, #12]
 800159e:	9903      	ldr	r1, [sp, #12]
 80015a0:	1a5b      	subs	r3, r3, r1
 80015a2:	42ab      	cmp	r3, r5
 80015a4:	dcf2      	bgt.n	800158c <_printf_i+0x220>
 80015a6:	e7eb      	b.n	8001580 <_printf_i+0x214>
 80015a8:	2500      	movs	r5, #0
 80015aa:	f104 0619 	add.w	r6, r4, #25
 80015ae:	e7f5      	b.n	800159c <_printf_i+0x230>
 80015b0:	08001e7d 	.word	0x08001e7d
 80015b4:	08001e8e 	.word	0x08001e8e

080015b8 <_scanf_chars>:
 80015b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015bc:	4615      	mov	r5, r2
 80015be:	688a      	ldr	r2, [r1, #8]
 80015c0:	4680      	mov	r8, r0
 80015c2:	460c      	mov	r4, r1
 80015c4:	b932      	cbnz	r2, 80015d4 <_scanf_chars+0x1c>
 80015c6:	698a      	ldr	r2, [r1, #24]
 80015c8:	2a00      	cmp	r2, #0
 80015ca:	bf0c      	ite	eq
 80015cc:	2201      	moveq	r2, #1
 80015ce:	f04f 32ff 	movne.w	r2, #4294967295
 80015d2:	608a      	str	r2, [r1, #8]
 80015d4:	2700      	movs	r7, #0
 80015d6:	6822      	ldr	r2, [r4, #0]
 80015d8:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8001664 <_scanf_chars+0xac>
 80015dc:	06d1      	lsls	r1, r2, #27
 80015de:	bf5f      	itttt	pl
 80015e0:	681a      	ldrpl	r2, [r3, #0]
 80015e2:	1d11      	addpl	r1, r2, #4
 80015e4:	6019      	strpl	r1, [r3, #0]
 80015e6:	6816      	ldrpl	r6, [r2, #0]
 80015e8:	69a0      	ldr	r0, [r4, #24]
 80015ea:	b188      	cbz	r0, 8001610 <_scanf_chars+0x58>
 80015ec:	2801      	cmp	r0, #1
 80015ee:	d107      	bne.n	8001600 <_scanf_chars+0x48>
 80015f0:	682b      	ldr	r3, [r5, #0]
 80015f2:	781a      	ldrb	r2, [r3, #0]
 80015f4:	6963      	ldr	r3, [r4, #20]
 80015f6:	5c9b      	ldrb	r3, [r3, r2]
 80015f8:	b953      	cbnz	r3, 8001610 <_scanf_chars+0x58>
 80015fa:	bb27      	cbnz	r7, 8001646 <_scanf_chars+0x8e>
 80015fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001600:	2802      	cmp	r0, #2
 8001602:	d120      	bne.n	8001646 <_scanf_chars+0x8e>
 8001604:	682b      	ldr	r3, [r5, #0]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	f813 3009 	ldrb.w	r3, [r3, r9]
 800160c:	071b      	lsls	r3, r3, #28
 800160e:	d41a      	bmi.n	8001646 <_scanf_chars+0x8e>
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	3701      	adds	r7, #1
 8001614:	06da      	lsls	r2, r3, #27
 8001616:	bf5e      	ittt	pl
 8001618:	682b      	ldrpl	r3, [r5, #0]
 800161a:	781b      	ldrbpl	r3, [r3, #0]
 800161c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8001620:	682a      	ldr	r2, [r5, #0]
 8001622:	686b      	ldr	r3, [r5, #4]
 8001624:	3201      	adds	r2, #1
 8001626:	602a      	str	r2, [r5, #0]
 8001628:	68a2      	ldr	r2, [r4, #8]
 800162a:	3b01      	subs	r3, #1
 800162c:	3a01      	subs	r2, #1
 800162e:	606b      	str	r3, [r5, #4]
 8001630:	60a2      	str	r2, [r4, #8]
 8001632:	b142      	cbz	r2, 8001646 <_scanf_chars+0x8e>
 8001634:	2b00      	cmp	r3, #0
 8001636:	dcd7      	bgt.n	80015e8 <_scanf_chars+0x30>
 8001638:	4629      	mov	r1, r5
 800163a:	4640      	mov	r0, r8
 800163c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8001640:	4798      	blx	r3
 8001642:	2800      	cmp	r0, #0
 8001644:	d0d0      	beq.n	80015e8 <_scanf_chars+0x30>
 8001646:	6823      	ldr	r3, [r4, #0]
 8001648:	f013 0310 	ands.w	r3, r3, #16
 800164c:	d105      	bne.n	800165a <_scanf_chars+0xa2>
 800164e:	68e2      	ldr	r2, [r4, #12]
 8001650:	3201      	adds	r2, #1
 8001652:	60e2      	str	r2, [r4, #12]
 8001654:	69a2      	ldr	r2, [r4, #24]
 8001656:	b102      	cbz	r2, 800165a <_scanf_chars+0xa2>
 8001658:	7033      	strb	r3, [r6, #0]
 800165a:	6923      	ldr	r3, [r4, #16]
 800165c:	2000      	movs	r0, #0
 800165e:	441f      	add	r7, r3
 8001660:	6127      	str	r7, [r4, #16]
 8001662:	e7cb      	b.n	80015fc <_scanf_chars+0x44>
 8001664:	08001ebb 	.word	0x08001ebb

08001668 <_scanf_i>:
 8001668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800166c:	460c      	mov	r4, r1
 800166e:	4698      	mov	r8, r3
 8001670:	4b72      	ldr	r3, [pc, #456]	; (800183c <_scanf_i+0x1d4>)
 8001672:	b087      	sub	sp, #28
 8001674:	4682      	mov	sl, r0
 8001676:	4616      	mov	r6, r2
 8001678:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800167c:	ab03      	add	r3, sp, #12
 800167e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001682:	4b6f      	ldr	r3, [pc, #444]	; (8001840 <_scanf_i+0x1d8>)
 8001684:	69a1      	ldr	r1, [r4, #24]
 8001686:	4a6f      	ldr	r2, [pc, #444]	; (8001844 <_scanf_i+0x1dc>)
 8001688:	4627      	mov	r7, r4
 800168a:	2903      	cmp	r1, #3
 800168c:	bf18      	it	ne
 800168e:	461a      	movne	r2, r3
 8001690:	68a3      	ldr	r3, [r4, #8]
 8001692:	9201      	str	r2, [sp, #4]
 8001694:	1e5a      	subs	r2, r3, #1
 8001696:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800169a:	bf81      	itttt	hi
 800169c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80016a0:	eb03 0905 	addhi.w	r9, r3, r5
 80016a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80016a8:	60a3      	strhi	r3, [r4, #8]
 80016aa:	f857 3b1c 	ldr.w	r3, [r7], #28
 80016ae:	bf98      	it	ls
 80016b0:	f04f 0900 	movls.w	r9, #0
 80016b4:	463d      	mov	r5, r7
 80016b6:	f04f 0b00 	mov.w	fp, #0
 80016ba:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80016be:	6023      	str	r3, [r4, #0]
 80016c0:	6831      	ldr	r1, [r6, #0]
 80016c2:	ab03      	add	r3, sp, #12
 80016c4:	2202      	movs	r2, #2
 80016c6:	7809      	ldrb	r1, [r1, #0]
 80016c8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80016cc:	f000 fa38 	bl	8001b40 <memchr>
 80016d0:	b328      	cbz	r0, 800171e <_scanf_i+0xb6>
 80016d2:	f1bb 0f01 	cmp.w	fp, #1
 80016d6:	d159      	bne.n	800178c <_scanf_i+0x124>
 80016d8:	6862      	ldr	r2, [r4, #4]
 80016da:	b92a      	cbnz	r2, 80016e8 <_scanf_i+0x80>
 80016dc:	2308      	movs	r3, #8
 80016de:	6822      	ldr	r2, [r4, #0]
 80016e0:	6063      	str	r3, [r4, #4]
 80016e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016e6:	6022      	str	r2, [r4, #0]
 80016e8:	6822      	ldr	r2, [r4, #0]
 80016ea:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80016ee:	6022      	str	r2, [r4, #0]
 80016f0:	68a2      	ldr	r2, [r4, #8]
 80016f2:	1e51      	subs	r1, r2, #1
 80016f4:	60a1      	str	r1, [r4, #8]
 80016f6:	b192      	cbz	r2, 800171e <_scanf_i+0xb6>
 80016f8:	6832      	ldr	r2, [r6, #0]
 80016fa:	1c51      	adds	r1, r2, #1
 80016fc:	6031      	str	r1, [r6, #0]
 80016fe:	7812      	ldrb	r2, [r2, #0]
 8001700:	f805 2b01 	strb.w	r2, [r5], #1
 8001704:	6872      	ldr	r2, [r6, #4]
 8001706:	3a01      	subs	r2, #1
 8001708:	2a00      	cmp	r2, #0
 800170a:	6072      	str	r2, [r6, #4]
 800170c:	dc07      	bgt.n	800171e <_scanf_i+0xb6>
 800170e:	4631      	mov	r1, r6
 8001710:	4650      	mov	r0, sl
 8001712:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8001716:	4790      	blx	r2
 8001718:	2800      	cmp	r0, #0
 800171a:	f040 8085 	bne.w	8001828 <_scanf_i+0x1c0>
 800171e:	f10b 0b01 	add.w	fp, fp, #1
 8001722:	f1bb 0f03 	cmp.w	fp, #3
 8001726:	d1cb      	bne.n	80016c0 <_scanf_i+0x58>
 8001728:	6863      	ldr	r3, [r4, #4]
 800172a:	b90b      	cbnz	r3, 8001730 <_scanf_i+0xc8>
 800172c:	230a      	movs	r3, #10
 800172e:	6063      	str	r3, [r4, #4]
 8001730:	6863      	ldr	r3, [r4, #4]
 8001732:	4945      	ldr	r1, [pc, #276]	; (8001848 <_scanf_i+0x1e0>)
 8001734:	6960      	ldr	r0, [r4, #20]
 8001736:	1ac9      	subs	r1, r1, r3
 8001738:	f000 f888 	bl	800184c <__sccl>
 800173c:	f04f 0b00 	mov.w	fp, #0
 8001740:	68a3      	ldr	r3, [r4, #8]
 8001742:	6822      	ldr	r2, [r4, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d03d      	beq.n	80017c4 <_scanf_i+0x15c>
 8001748:	6831      	ldr	r1, [r6, #0]
 800174a:	6960      	ldr	r0, [r4, #20]
 800174c:	f891 c000 	ldrb.w	ip, [r1]
 8001750:	f810 000c 	ldrb.w	r0, [r0, ip]
 8001754:	2800      	cmp	r0, #0
 8001756:	d035      	beq.n	80017c4 <_scanf_i+0x15c>
 8001758:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800175c:	d124      	bne.n	80017a8 <_scanf_i+0x140>
 800175e:	0510      	lsls	r0, r2, #20
 8001760:	d522      	bpl.n	80017a8 <_scanf_i+0x140>
 8001762:	f10b 0b01 	add.w	fp, fp, #1
 8001766:	f1b9 0f00 	cmp.w	r9, #0
 800176a:	d003      	beq.n	8001774 <_scanf_i+0x10c>
 800176c:	3301      	adds	r3, #1
 800176e:	f109 39ff 	add.w	r9, r9, #4294967295
 8001772:	60a3      	str	r3, [r4, #8]
 8001774:	6873      	ldr	r3, [r6, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	2b00      	cmp	r3, #0
 800177a:	6073      	str	r3, [r6, #4]
 800177c:	dd1b      	ble.n	80017b6 <_scanf_i+0x14e>
 800177e:	6833      	ldr	r3, [r6, #0]
 8001780:	3301      	adds	r3, #1
 8001782:	6033      	str	r3, [r6, #0]
 8001784:	68a3      	ldr	r3, [r4, #8]
 8001786:	3b01      	subs	r3, #1
 8001788:	60a3      	str	r3, [r4, #8]
 800178a:	e7d9      	b.n	8001740 <_scanf_i+0xd8>
 800178c:	f1bb 0f02 	cmp.w	fp, #2
 8001790:	d1ae      	bne.n	80016f0 <_scanf_i+0x88>
 8001792:	6822      	ldr	r2, [r4, #0]
 8001794:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8001798:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800179c:	d1bf      	bne.n	800171e <_scanf_i+0xb6>
 800179e:	2310      	movs	r3, #16
 80017a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017a4:	6063      	str	r3, [r4, #4]
 80017a6:	e7a2      	b.n	80016ee <_scanf_i+0x86>
 80017a8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80017ac:	6022      	str	r2, [r4, #0]
 80017ae:	780b      	ldrb	r3, [r1, #0]
 80017b0:	f805 3b01 	strb.w	r3, [r5], #1
 80017b4:	e7de      	b.n	8001774 <_scanf_i+0x10c>
 80017b6:	4631      	mov	r1, r6
 80017b8:	4650      	mov	r0, sl
 80017ba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80017be:	4798      	blx	r3
 80017c0:	2800      	cmp	r0, #0
 80017c2:	d0df      	beq.n	8001784 <_scanf_i+0x11c>
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	05d9      	lsls	r1, r3, #23
 80017c8:	d50d      	bpl.n	80017e6 <_scanf_i+0x17e>
 80017ca:	42bd      	cmp	r5, r7
 80017cc:	d909      	bls.n	80017e2 <_scanf_i+0x17a>
 80017ce:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80017d2:	4632      	mov	r2, r6
 80017d4:	4650      	mov	r0, sl
 80017d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80017da:	f105 39ff 	add.w	r9, r5, #4294967295
 80017de:	4798      	blx	r3
 80017e0:	464d      	mov	r5, r9
 80017e2:	42bd      	cmp	r5, r7
 80017e4:	d028      	beq.n	8001838 <_scanf_i+0x1d0>
 80017e6:	6822      	ldr	r2, [r4, #0]
 80017e8:	f012 0210 	ands.w	r2, r2, #16
 80017ec:	d113      	bne.n	8001816 <_scanf_i+0x1ae>
 80017ee:	702a      	strb	r2, [r5, #0]
 80017f0:	4639      	mov	r1, r7
 80017f2:	6863      	ldr	r3, [r4, #4]
 80017f4:	4650      	mov	r0, sl
 80017f6:	9e01      	ldr	r6, [sp, #4]
 80017f8:	47b0      	blx	r6
 80017fa:	f8d8 3000 	ldr.w	r3, [r8]
 80017fe:	6821      	ldr	r1, [r4, #0]
 8001800:	1d1a      	adds	r2, r3, #4
 8001802:	f8c8 2000 	str.w	r2, [r8]
 8001806:	f011 0f20 	tst.w	r1, #32
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	d00f      	beq.n	800182e <_scanf_i+0x1c6>
 800180e:	6018      	str	r0, [r3, #0]
 8001810:	68e3      	ldr	r3, [r4, #12]
 8001812:	3301      	adds	r3, #1
 8001814:	60e3      	str	r3, [r4, #12]
 8001816:	2000      	movs	r0, #0
 8001818:	1bed      	subs	r5, r5, r7
 800181a:	44ab      	add	fp, r5
 800181c:	6925      	ldr	r5, [r4, #16]
 800181e:	445d      	add	r5, fp
 8001820:	6125      	str	r5, [r4, #16]
 8001822:	b007      	add	sp, #28
 8001824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001828:	f04f 0b00 	mov.w	fp, #0
 800182c:	e7ca      	b.n	80017c4 <_scanf_i+0x15c>
 800182e:	07ca      	lsls	r2, r1, #31
 8001830:	bf4c      	ite	mi
 8001832:	8018      	strhmi	r0, [r3, #0]
 8001834:	6018      	strpl	r0, [r3, #0]
 8001836:	e7eb      	b.n	8001810 <_scanf_i+0x1a8>
 8001838:	2001      	movs	r0, #1
 800183a:	e7f2      	b.n	8001822 <_scanf_i+0x1ba>
 800183c:	08001e60 	.word	0x08001e60
 8001840:	08001ac9 	.word	0x08001ac9
 8001844:	080019cd 	.word	0x080019cd
 8001848:	08001eb8 	.word	0x08001eb8

0800184c <__sccl>:
 800184c:	b570      	push	{r4, r5, r6, lr}
 800184e:	780b      	ldrb	r3, [r1, #0]
 8001850:	4604      	mov	r4, r0
 8001852:	2b5e      	cmp	r3, #94	; 0x5e
 8001854:	bf13      	iteet	ne
 8001856:	2200      	movne	r2, #0
 8001858:	2201      	moveq	r2, #1
 800185a:	784b      	ldrbeq	r3, [r1, #1]
 800185c:	1c48      	addne	r0, r1, #1
 800185e:	bf08      	it	eq
 8001860:	1c88      	addeq	r0, r1, #2
 8001862:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8001866:	1e61      	subs	r1, r4, #1
 8001868:	f801 2f01 	strb.w	r2, [r1, #1]!
 800186c:	42a9      	cmp	r1, r5
 800186e:	d1fb      	bne.n	8001868 <__sccl+0x1c>
 8001870:	b90b      	cbnz	r3, 8001876 <__sccl+0x2a>
 8001872:	3801      	subs	r0, #1
 8001874:	bd70      	pop	{r4, r5, r6, pc}
 8001876:	f082 0101 	eor.w	r1, r2, #1
 800187a:	54e1      	strb	r1, [r4, r3]
 800187c:	1c42      	adds	r2, r0, #1
 800187e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8001882:	4610      	mov	r0, r2
 8001884:	2d2d      	cmp	r5, #45	; 0x2d
 8001886:	f102 36ff 	add.w	r6, r2, #4294967295
 800188a:	d006      	beq.n	800189a <__sccl+0x4e>
 800188c:	2d5d      	cmp	r5, #93	; 0x5d
 800188e:	d0f1      	beq.n	8001874 <__sccl+0x28>
 8001890:	b90d      	cbnz	r5, 8001896 <__sccl+0x4a>
 8001892:	4630      	mov	r0, r6
 8001894:	e7ee      	b.n	8001874 <__sccl+0x28>
 8001896:	462b      	mov	r3, r5
 8001898:	e7ef      	b.n	800187a <__sccl+0x2e>
 800189a:	7816      	ldrb	r6, [r2, #0]
 800189c:	2e5d      	cmp	r6, #93	; 0x5d
 800189e:	d0fa      	beq.n	8001896 <__sccl+0x4a>
 80018a0:	42b3      	cmp	r3, r6
 80018a2:	dcf8      	bgt.n	8001896 <__sccl+0x4a>
 80018a4:	4618      	mov	r0, r3
 80018a6:	3001      	adds	r0, #1
 80018a8:	4286      	cmp	r6, r0
 80018aa:	5421      	strb	r1, [r4, r0]
 80018ac:	dcfb      	bgt.n	80018a6 <__sccl+0x5a>
 80018ae:	43d8      	mvns	r0, r3
 80018b0:	4430      	add	r0, r6
 80018b2:	42b3      	cmp	r3, r6
 80018b4:	bfa8      	it	ge
 80018b6:	2000      	movge	r0, #0
 80018b8:	1c5d      	adds	r5, r3, #1
 80018ba:	182b      	adds	r3, r5, r0
 80018bc:	3202      	adds	r2, #2
 80018be:	e7de      	b.n	800187e <__sccl+0x32>

080018c0 <_strtol_l.isra.0>:
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018c6:	4686      	mov	lr, r0
 80018c8:	d001      	beq.n	80018ce <_strtol_l.isra.0+0xe>
 80018ca:	2b24      	cmp	r3, #36	; 0x24
 80018cc:	d906      	bls.n	80018dc <_strtol_l.isra.0+0x1c>
 80018ce:	f7ff f91d 	bl	8000b0c <__errno>
 80018d2:	2316      	movs	r3, #22
 80018d4:	6003      	str	r3, [r0, #0]
 80018d6:	2000      	movs	r0, #0
 80018d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018dc:	468c      	mov	ip, r1
 80018de:	4e3a      	ldr	r6, [pc, #232]	; (80019c8 <_strtol_l.isra.0+0x108>)
 80018e0:	4660      	mov	r0, ip
 80018e2:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80018e6:	5da5      	ldrb	r5, [r4, r6]
 80018e8:	f015 0508 	ands.w	r5, r5, #8
 80018ec:	d1f8      	bne.n	80018e0 <_strtol_l.isra.0+0x20>
 80018ee:	2c2d      	cmp	r4, #45	; 0x2d
 80018f0:	d133      	bne.n	800195a <_strtol_l.isra.0+0x9a>
 80018f2:	f04f 0801 	mov.w	r8, #1
 80018f6:	f89c 4000 	ldrb.w	r4, [ip]
 80018fa:	f100 0c02 	add.w	ip, r0, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d05d      	beq.n	80019be <_strtol_l.isra.0+0xfe>
 8001902:	2b10      	cmp	r3, #16
 8001904:	d10c      	bne.n	8001920 <_strtol_l.isra.0+0x60>
 8001906:	2c30      	cmp	r4, #48	; 0x30
 8001908:	d10a      	bne.n	8001920 <_strtol_l.isra.0+0x60>
 800190a:	f89c 0000 	ldrb.w	r0, [ip]
 800190e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8001912:	2858      	cmp	r0, #88	; 0x58
 8001914:	d14e      	bne.n	80019b4 <_strtol_l.isra.0+0xf4>
 8001916:	2310      	movs	r3, #16
 8001918:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800191c:	f10c 0c02 	add.w	ip, ip, #2
 8001920:	2500      	movs	r5, #0
 8001922:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8001926:	3f01      	subs	r7, #1
 8001928:	fbb7 f9f3 	udiv	r9, r7, r3
 800192c:	4628      	mov	r0, r5
 800192e:	fb03 7a19 	mls	sl, r3, r9, r7
 8001932:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8001936:	2e09      	cmp	r6, #9
 8001938:	d818      	bhi.n	800196c <_strtol_l.isra.0+0xac>
 800193a:	4634      	mov	r4, r6
 800193c:	42a3      	cmp	r3, r4
 800193e:	dd24      	ble.n	800198a <_strtol_l.isra.0+0xca>
 8001940:	2d00      	cmp	r5, #0
 8001942:	db1f      	blt.n	8001984 <_strtol_l.isra.0+0xc4>
 8001944:	4581      	cmp	r9, r0
 8001946:	d31d      	bcc.n	8001984 <_strtol_l.isra.0+0xc4>
 8001948:	d101      	bne.n	800194e <_strtol_l.isra.0+0x8e>
 800194a:	45a2      	cmp	sl, r4
 800194c:	db1a      	blt.n	8001984 <_strtol_l.isra.0+0xc4>
 800194e:	2501      	movs	r5, #1
 8001950:	fb00 4003 	mla	r0, r0, r3, r4
 8001954:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8001958:	e7eb      	b.n	8001932 <_strtol_l.isra.0+0x72>
 800195a:	2c2b      	cmp	r4, #43	; 0x2b
 800195c:	bf08      	it	eq
 800195e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8001962:	46a8      	mov	r8, r5
 8001964:	bf08      	it	eq
 8001966:	f100 0c02 	addeq.w	ip, r0, #2
 800196a:	e7c8      	b.n	80018fe <_strtol_l.isra.0+0x3e>
 800196c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8001970:	2e19      	cmp	r6, #25
 8001972:	d801      	bhi.n	8001978 <_strtol_l.isra.0+0xb8>
 8001974:	3c37      	subs	r4, #55	; 0x37
 8001976:	e7e1      	b.n	800193c <_strtol_l.isra.0+0x7c>
 8001978:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800197c:	2e19      	cmp	r6, #25
 800197e:	d804      	bhi.n	800198a <_strtol_l.isra.0+0xca>
 8001980:	3c57      	subs	r4, #87	; 0x57
 8001982:	e7db      	b.n	800193c <_strtol_l.isra.0+0x7c>
 8001984:	f04f 35ff 	mov.w	r5, #4294967295
 8001988:	e7e4      	b.n	8001954 <_strtol_l.isra.0+0x94>
 800198a:	2d00      	cmp	r5, #0
 800198c:	da08      	bge.n	80019a0 <_strtol_l.isra.0+0xe0>
 800198e:	2322      	movs	r3, #34	; 0x22
 8001990:	4638      	mov	r0, r7
 8001992:	f8ce 3000 	str.w	r3, [lr]
 8001996:	2a00      	cmp	r2, #0
 8001998:	d09e      	beq.n	80018d8 <_strtol_l.isra.0+0x18>
 800199a:	f10c 31ff 	add.w	r1, ip, #4294967295
 800199e:	e007      	b.n	80019b0 <_strtol_l.isra.0+0xf0>
 80019a0:	f1b8 0f00 	cmp.w	r8, #0
 80019a4:	d000      	beq.n	80019a8 <_strtol_l.isra.0+0xe8>
 80019a6:	4240      	negs	r0, r0
 80019a8:	2a00      	cmp	r2, #0
 80019aa:	d095      	beq.n	80018d8 <_strtol_l.isra.0+0x18>
 80019ac:	2d00      	cmp	r5, #0
 80019ae:	d1f4      	bne.n	800199a <_strtol_l.isra.0+0xda>
 80019b0:	6011      	str	r1, [r2, #0]
 80019b2:	e791      	b.n	80018d8 <_strtol_l.isra.0+0x18>
 80019b4:	2430      	movs	r4, #48	; 0x30
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1b2      	bne.n	8001920 <_strtol_l.isra.0+0x60>
 80019ba:	2308      	movs	r3, #8
 80019bc:	e7b0      	b.n	8001920 <_strtol_l.isra.0+0x60>
 80019be:	2c30      	cmp	r4, #48	; 0x30
 80019c0:	d0a3      	beq.n	800190a <_strtol_l.isra.0+0x4a>
 80019c2:	230a      	movs	r3, #10
 80019c4:	e7ac      	b.n	8001920 <_strtol_l.isra.0+0x60>
 80019c6:	bf00      	nop
 80019c8:	08001ebb 	.word	0x08001ebb

080019cc <_strtol_r>:
 80019cc:	f7ff bf78 	b.w	80018c0 <_strtol_l.isra.0>

080019d0 <_strtoul_l.isra.0>:
 80019d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019d4:	468c      	mov	ip, r1
 80019d6:	4686      	mov	lr, r0
 80019d8:	4e3a      	ldr	r6, [pc, #232]	; (8001ac4 <_strtoul_l.isra.0+0xf4>)
 80019da:	4660      	mov	r0, ip
 80019dc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80019e0:	5da5      	ldrb	r5, [r4, r6]
 80019e2:	f015 0508 	ands.w	r5, r5, #8
 80019e6:	d1f8      	bne.n	80019da <_strtoul_l.isra.0+0xa>
 80019e8:	2c2d      	cmp	r4, #45	; 0x2d
 80019ea:	d134      	bne.n	8001a56 <_strtoul_l.isra.0+0x86>
 80019ec:	f04f 0801 	mov.w	r8, #1
 80019f0:	f89c 4000 	ldrb.w	r4, [ip]
 80019f4:	f100 0c02 	add.w	ip, r0, #2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d05e      	beq.n	8001aba <_strtoul_l.isra.0+0xea>
 80019fc:	2b10      	cmp	r3, #16
 80019fe:	d10c      	bne.n	8001a1a <_strtoul_l.isra.0+0x4a>
 8001a00:	2c30      	cmp	r4, #48	; 0x30
 8001a02:	d10a      	bne.n	8001a1a <_strtoul_l.isra.0+0x4a>
 8001a04:	f89c 0000 	ldrb.w	r0, [ip]
 8001a08:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8001a0c:	2858      	cmp	r0, #88	; 0x58
 8001a0e:	d14f      	bne.n	8001ab0 <_strtoul_l.isra.0+0xe0>
 8001a10:	2310      	movs	r3, #16
 8001a12:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8001a16:	f10c 0c02 	add.w	ip, ip, #2
 8001a1a:	f04f 37ff 	mov.w	r7, #4294967295
 8001a1e:	fbb7 f7f3 	udiv	r7, r7, r3
 8001a22:	2500      	movs	r5, #0
 8001a24:	fb03 f907 	mul.w	r9, r3, r7
 8001a28:	4628      	mov	r0, r5
 8001a2a:	ea6f 0909 	mvn.w	r9, r9
 8001a2e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8001a32:	2e09      	cmp	r6, #9
 8001a34:	d818      	bhi.n	8001a68 <_strtoul_l.isra.0+0x98>
 8001a36:	4634      	mov	r4, r6
 8001a38:	42a3      	cmp	r3, r4
 8001a3a:	dd24      	ble.n	8001a86 <_strtoul_l.isra.0+0xb6>
 8001a3c:	2d00      	cmp	r5, #0
 8001a3e:	db1f      	blt.n	8001a80 <_strtoul_l.isra.0+0xb0>
 8001a40:	4287      	cmp	r7, r0
 8001a42:	d31d      	bcc.n	8001a80 <_strtoul_l.isra.0+0xb0>
 8001a44:	d101      	bne.n	8001a4a <_strtoul_l.isra.0+0x7a>
 8001a46:	45a1      	cmp	r9, r4
 8001a48:	db1a      	blt.n	8001a80 <_strtoul_l.isra.0+0xb0>
 8001a4a:	2501      	movs	r5, #1
 8001a4c:	fb00 4003 	mla	r0, r0, r3, r4
 8001a50:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8001a54:	e7eb      	b.n	8001a2e <_strtoul_l.isra.0+0x5e>
 8001a56:	2c2b      	cmp	r4, #43	; 0x2b
 8001a58:	bf08      	it	eq
 8001a5a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8001a5e:	46a8      	mov	r8, r5
 8001a60:	bf08      	it	eq
 8001a62:	f100 0c02 	addeq.w	ip, r0, #2
 8001a66:	e7c7      	b.n	80019f8 <_strtoul_l.isra.0+0x28>
 8001a68:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8001a6c:	2e19      	cmp	r6, #25
 8001a6e:	d801      	bhi.n	8001a74 <_strtoul_l.isra.0+0xa4>
 8001a70:	3c37      	subs	r4, #55	; 0x37
 8001a72:	e7e1      	b.n	8001a38 <_strtoul_l.isra.0+0x68>
 8001a74:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8001a78:	2e19      	cmp	r6, #25
 8001a7a:	d804      	bhi.n	8001a86 <_strtoul_l.isra.0+0xb6>
 8001a7c:	3c57      	subs	r4, #87	; 0x57
 8001a7e:	e7db      	b.n	8001a38 <_strtoul_l.isra.0+0x68>
 8001a80:	f04f 35ff 	mov.w	r5, #4294967295
 8001a84:	e7e4      	b.n	8001a50 <_strtoul_l.isra.0+0x80>
 8001a86:	2d00      	cmp	r5, #0
 8001a88:	da07      	bge.n	8001a9a <_strtoul_l.isra.0+0xca>
 8001a8a:	2322      	movs	r3, #34	; 0x22
 8001a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a90:	f8ce 3000 	str.w	r3, [lr]
 8001a94:	b942      	cbnz	r2, 8001aa8 <_strtoul_l.isra.0+0xd8>
 8001a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a9a:	f1b8 0f00 	cmp.w	r8, #0
 8001a9e:	d000      	beq.n	8001aa2 <_strtoul_l.isra.0+0xd2>
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	2a00      	cmp	r2, #0
 8001aa4:	d0f7      	beq.n	8001a96 <_strtoul_l.isra.0+0xc6>
 8001aa6:	b10d      	cbz	r5, 8001aac <_strtoul_l.isra.0+0xdc>
 8001aa8:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001aac:	6011      	str	r1, [r2, #0]
 8001aae:	e7f2      	b.n	8001a96 <_strtoul_l.isra.0+0xc6>
 8001ab0:	2430      	movs	r4, #48	; 0x30
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1b1      	bne.n	8001a1a <_strtoul_l.isra.0+0x4a>
 8001ab6:	2308      	movs	r3, #8
 8001ab8:	e7af      	b.n	8001a1a <_strtoul_l.isra.0+0x4a>
 8001aba:	2c30      	cmp	r4, #48	; 0x30
 8001abc:	d0a2      	beq.n	8001a04 <_strtoul_l.isra.0+0x34>
 8001abe:	230a      	movs	r3, #10
 8001ac0:	e7ab      	b.n	8001a1a <_strtoul_l.isra.0+0x4a>
 8001ac2:	bf00      	nop
 8001ac4:	08001ebb 	.word	0x08001ebb

08001ac8 <_strtoul_r>:
 8001ac8:	f7ff bf82 	b.w	80019d0 <_strtoul_l.isra.0>

08001acc <__submore>:
 8001acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ad0:	460c      	mov	r4, r1
 8001ad2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8001ad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ad8:	4299      	cmp	r1, r3
 8001ada:	d11b      	bne.n	8001b14 <__submore+0x48>
 8001adc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ae0:	f000 f8b0 	bl	8001c44 <_malloc_r>
 8001ae4:	b918      	cbnz	r0, 8001aee <__submore+0x22>
 8001ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8001aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001aee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af2:	63a3      	str	r3, [r4, #56]	; 0x38
 8001af4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8001af8:	6360      	str	r0, [r4, #52]	; 0x34
 8001afa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8001afe:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001b02:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8001b06:	7043      	strb	r3, [r0, #1]
 8001b08:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001b0c:	7003      	strb	r3, [r0, #0]
 8001b0e:	6020      	str	r0, [r4, #0]
 8001b10:	2000      	movs	r0, #0
 8001b12:	e7ea      	b.n	8001aea <__submore+0x1e>
 8001b14:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8001b16:	0077      	lsls	r7, r6, #1
 8001b18:	463a      	mov	r2, r7
 8001b1a:	f000 f8ed 	bl	8001cf8 <_realloc_r>
 8001b1e:	4605      	mov	r5, r0
 8001b20:	2800      	cmp	r0, #0
 8001b22:	d0e0      	beq.n	8001ae6 <__submore+0x1a>
 8001b24:	eb00 0806 	add.w	r8, r0, r6
 8001b28:	4601      	mov	r1, r0
 8001b2a:	4632      	mov	r2, r6
 8001b2c:	4640      	mov	r0, r8
 8001b2e:	f000 f815 	bl	8001b5c <memcpy>
 8001b32:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8001b36:	f8c4 8000 	str.w	r8, [r4]
 8001b3a:	e7e9      	b.n	8001b10 <__submore+0x44>

08001b3c <__retarget_lock_acquire_recursive>:
 8001b3c:	4770      	bx	lr

08001b3e <__retarget_lock_release_recursive>:
 8001b3e:	4770      	bx	lr

08001b40 <memchr>:
 8001b40:	4603      	mov	r3, r0
 8001b42:	b510      	push	{r4, lr}
 8001b44:	b2c9      	uxtb	r1, r1
 8001b46:	4402      	add	r2, r0
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	d101      	bne.n	8001b52 <memchr+0x12>
 8001b4e:	2000      	movs	r0, #0
 8001b50:	e003      	b.n	8001b5a <memchr+0x1a>
 8001b52:	7804      	ldrb	r4, [r0, #0]
 8001b54:	3301      	adds	r3, #1
 8001b56:	428c      	cmp	r4, r1
 8001b58:	d1f6      	bne.n	8001b48 <memchr+0x8>
 8001b5a:	bd10      	pop	{r4, pc}

08001b5c <memcpy>:
 8001b5c:	440a      	add	r2, r1
 8001b5e:	4291      	cmp	r1, r2
 8001b60:	f100 33ff 	add.w	r3, r0, #4294967295
 8001b64:	d100      	bne.n	8001b68 <memcpy+0xc>
 8001b66:	4770      	bx	lr
 8001b68:	b510      	push	{r4, lr}
 8001b6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001b6e:	4291      	cmp	r1, r2
 8001b70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001b74:	d1f9      	bne.n	8001b6a <memcpy+0xe>
 8001b76:	bd10      	pop	{r4, pc}

08001b78 <memmove>:
 8001b78:	4288      	cmp	r0, r1
 8001b7a:	b510      	push	{r4, lr}
 8001b7c:	eb01 0402 	add.w	r4, r1, r2
 8001b80:	d902      	bls.n	8001b88 <memmove+0x10>
 8001b82:	4284      	cmp	r4, r0
 8001b84:	4623      	mov	r3, r4
 8001b86:	d807      	bhi.n	8001b98 <memmove+0x20>
 8001b88:	1e43      	subs	r3, r0, #1
 8001b8a:	42a1      	cmp	r1, r4
 8001b8c:	d008      	beq.n	8001ba0 <memmove+0x28>
 8001b8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001b92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001b96:	e7f8      	b.n	8001b8a <memmove+0x12>
 8001b98:	4601      	mov	r1, r0
 8001b9a:	4402      	add	r2, r0
 8001b9c:	428a      	cmp	r2, r1
 8001b9e:	d100      	bne.n	8001ba2 <memmove+0x2a>
 8001ba0:	bd10      	pop	{r4, pc}
 8001ba2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001ba6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001baa:	e7f7      	b.n	8001b9c <memmove+0x24>

08001bac <_free_r>:
 8001bac:	b538      	push	{r3, r4, r5, lr}
 8001bae:	4605      	mov	r5, r0
 8001bb0:	2900      	cmp	r1, #0
 8001bb2:	d043      	beq.n	8001c3c <_free_r+0x90>
 8001bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001bb8:	1f0c      	subs	r4, r1, #4
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	bfb8      	it	lt
 8001bbe:	18e4      	addlt	r4, r4, r3
 8001bc0:	f000 f8d0 	bl	8001d64 <__malloc_lock>
 8001bc4:	4a1e      	ldr	r2, [pc, #120]	; (8001c40 <_free_r+0x94>)
 8001bc6:	6813      	ldr	r3, [r2, #0]
 8001bc8:	4610      	mov	r0, r2
 8001bca:	b933      	cbnz	r3, 8001bda <_free_r+0x2e>
 8001bcc:	6063      	str	r3, [r4, #4]
 8001bce:	6014      	str	r4, [r2, #0]
 8001bd0:	4628      	mov	r0, r5
 8001bd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bd6:	f000 b8cb 	b.w	8001d70 <__malloc_unlock>
 8001bda:	42a3      	cmp	r3, r4
 8001bdc:	d90a      	bls.n	8001bf4 <_free_r+0x48>
 8001bde:	6821      	ldr	r1, [r4, #0]
 8001be0:	1862      	adds	r2, r4, r1
 8001be2:	4293      	cmp	r3, r2
 8001be4:	bf01      	itttt	eq
 8001be6:	681a      	ldreq	r2, [r3, #0]
 8001be8:	685b      	ldreq	r3, [r3, #4]
 8001bea:	1852      	addeq	r2, r2, r1
 8001bec:	6022      	streq	r2, [r4, #0]
 8001bee:	6063      	str	r3, [r4, #4]
 8001bf0:	6004      	str	r4, [r0, #0]
 8001bf2:	e7ed      	b.n	8001bd0 <_free_r+0x24>
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	b10b      	cbz	r3, 8001bfe <_free_r+0x52>
 8001bfa:	42a3      	cmp	r3, r4
 8001bfc:	d9fa      	bls.n	8001bf4 <_free_r+0x48>
 8001bfe:	6811      	ldr	r1, [r2, #0]
 8001c00:	1850      	adds	r0, r2, r1
 8001c02:	42a0      	cmp	r0, r4
 8001c04:	d10b      	bne.n	8001c1e <_free_r+0x72>
 8001c06:	6820      	ldr	r0, [r4, #0]
 8001c08:	4401      	add	r1, r0
 8001c0a:	1850      	adds	r0, r2, r1
 8001c0c:	4283      	cmp	r3, r0
 8001c0e:	6011      	str	r1, [r2, #0]
 8001c10:	d1de      	bne.n	8001bd0 <_free_r+0x24>
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4401      	add	r1, r0
 8001c18:	6011      	str	r1, [r2, #0]
 8001c1a:	6053      	str	r3, [r2, #4]
 8001c1c:	e7d8      	b.n	8001bd0 <_free_r+0x24>
 8001c1e:	d902      	bls.n	8001c26 <_free_r+0x7a>
 8001c20:	230c      	movs	r3, #12
 8001c22:	602b      	str	r3, [r5, #0]
 8001c24:	e7d4      	b.n	8001bd0 <_free_r+0x24>
 8001c26:	6820      	ldr	r0, [r4, #0]
 8001c28:	1821      	adds	r1, r4, r0
 8001c2a:	428b      	cmp	r3, r1
 8001c2c:	bf01      	itttt	eq
 8001c2e:	6819      	ldreq	r1, [r3, #0]
 8001c30:	685b      	ldreq	r3, [r3, #4]
 8001c32:	1809      	addeq	r1, r1, r0
 8001c34:	6021      	streq	r1, [r4, #0]
 8001c36:	6063      	str	r3, [r4, #4]
 8001c38:	6054      	str	r4, [r2, #4]
 8001c3a:	e7c9      	b.n	8001bd0 <_free_r+0x24>
 8001c3c:	bd38      	pop	{r3, r4, r5, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000009c 	.word	0x2000009c

08001c44 <_malloc_r>:
 8001c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c46:	1ccd      	adds	r5, r1, #3
 8001c48:	f025 0503 	bic.w	r5, r5, #3
 8001c4c:	3508      	adds	r5, #8
 8001c4e:	2d0c      	cmp	r5, #12
 8001c50:	bf38      	it	cc
 8001c52:	250c      	movcc	r5, #12
 8001c54:	2d00      	cmp	r5, #0
 8001c56:	4606      	mov	r6, r0
 8001c58:	db01      	blt.n	8001c5e <_malloc_r+0x1a>
 8001c5a:	42a9      	cmp	r1, r5
 8001c5c:	d903      	bls.n	8001c66 <_malloc_r+0x22>
 8001c5e:	230c      	movs	r3, #12
 8001c60:	6033      	str	r3, [r6, #0]
 8001c62:	2000      	movs	r0, #0
 8001c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c66:	f000 f87d 	bl	8001d64 <__malloc_lock>
 8001c6a:	4921      	ldr	r1, [pc, #132]	; (8001cf0 <_malloc_r+0xac>)
 8001c6c:	680a      	ldr	r2, [r1, #0]
 8001c6e:	4614      	mov	r4, r2
 8001c70:	b99c      	cbnz	r4, 8001c9a <_malloc_r+0x56>
 8001c72:	4f20      	ldr	r7, [pc, #128]	; (8001cf4 <_malloc_r+0xb0>)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	b923      	cbnz	r3, 8001c82 <_malloc_r+0x3e>
 8001c78:	4621      	mov	r1, r4
 8001c7a:	4630      	mov	r0, r6
 8001c7c:	f000 f862 	bl	8001d44 <_sbrk_r>
 8001c80:	6038      	str	r0, [r7, #0]
 8001c82:	4629      	mov	r1, r5
 8001c84:	4630      	mov	r0, r6
 8001c86:	f000 f85d 	bl	8001d44 <_sbrk_r>
 8001c8a:	1c43      	adds	r3, r0, #1
 8001c8c:	d123      	bne.n	8001cd6 <_malloc_r+0x92>
 8001c8e:	230c      	movs	r3, #12
 8001c90:	4630      	mov	r0, r6
 8001c92:	6033      	str	r3, [r6, #0]
 8001c94:	f000 f86c 	bl	8001d70 <__malloc_unlock>
 8001c98:	e7e3      	b.n	8001c62 <_malloc_r+0x1e>
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	1b5b      	subs	r3, r3, r5
 8001c9e:	d417      	bmi.n	8001cd0 <_malloc_r+0x8c>
 8001ca0:	2b0b      	cmp	r3, #11
 8001ca2:	d903      	bls.n	8001cac <_malloc_r+0x68>
 8001ca4:	6023      	str	r3, [r4, #0]
 8001ca6:	441c      	add	r4, r3
 8001ca8:	6025      	str	r5, [r4, #0]
 8001caa:	e004      	b.n	8001cb6 <_malloc_r+0x72>
 8001cac:	6863      	ldr	r3, [r4, #4]
 8001cae:	42a2      	cmp	r2, r4
 8001cb0:	bf0c      	ite	eq
 8001cb2:	600b      	streq	r3, [r1, #0]
 8001cb4:	6053      	strne	r3, [r2, #4]
 8001cb6:	4630      	mov	r0, r6
 8001cb8:	f000 f85a 	bl	8001d70 <__malloc_unlock>
 8001cbc:	f104 000b 	add.w	r0, r4, #11
 8001cc0:	1d23      	adds	r3, r4, #4
 8001cc2:	f020 0007 	bic.w	r0, r0, #7
 8001cc6:	1ac2      	subs	r2, r0, r3
 8001cc8:	d0cc      	beq.n	8001c64 <_malloc_r+0x20>
 8001cca:	1a1b      	subs	r3, r3, r0
 8001ccc:	50a3      	str	r3, [r4, r2]
 8001cce:	e7c9      	b.n	8001c64 <_malloc_r+0x20>
 8001cd0:	4622      	mov	r2, r4
 8001cd2:	6864      	ldr	r4, [r4, #4]
 8001cd4:	e7cc      	b.n	8001c70 <_malloc_r+0x2c>
 8001cd6:	1cc4      	adds	r4, r0, #3
 8001cd8:	f024 0403 	bic.w	r4, r4, #3
 8001cdc:	42a0      	cmp	r0, r4
 8001cde:	d0e3      	beq.n	8001ca8 <_malloc_r+0x64>
 8001ce0:	1a21      	subs	r1, r4, r0
 8001ce2:	4630      	mov	r0, r6
 8001ce4:	f000 f82e 	bl	8001d44 <_sbrk_r>
 8001ce8:	3001      	adds	r0, #1
 8001cea:	d1dd      	bne.n	8001ca8 <_malloc_r+0x64>
 8001cec:	e7cf      	b.n	8001c8e <_malloc_r+0x4a>
 8001cee:	bf00      	nop
 8001cf0:	2000009c 	.word	0x2000009c
 8001cf4:	200000a0 	.word	0x200000a0

08001cf8 <_realloc_r>:
 8001cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cfa:	4607      	mov	r7, r0
 8001cfc:	4614      	mov	r4, r2
 8001cfe:	460e      	mov	r6, r1
 8001d00:	b921      	cbnz	r1, 8001d0c <_realloc_r+0x14>
 8001d02:	4611      	mov	r1, r2
 8001d04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001d08:	f7ff bf9c 	b.w	8001c44 <_malloc_r>
 8001d0c:	b922      	cbnz	r2, 8001d18 <_realloc_r+0x20>
 8001d0e:	f7ff ff4d 	bl	8001bac <_free_r>
 8001d12:	4625      	mov	r5, r4
 8001d14:	4628      	mov	r0, r5
 8001d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001d18:	f000 f830 	bl	8001d7c <_malloc_usable_size_r>
 8001d1c:	42a0      	cmp	r0, r4
 8001d1e:	d20f      	bcs.n	8001d40 <_realloc_r+0x48>
 8001d20:	4621      	mov	r1, r4
 8001d22:	4638      	mov	r0, r7
 8001d24:	f7ff ff8e 	bl	8001c44 <_malloc_r>
 8001d28:	4605      	mov	r5, r0
 8001d2a:	2800      	cmp	r0, #0
 8001d2c:	d0f2      	beq.n	8001d14 <_realloc_r+0x1c>
 8001d2e:	4631      	mov	r1, r6
 8001d30:	4622      	mov	r2, r4
 8001d32:	f7ff ff13 	bl	8001b5c <memcpy>
 8001d36:	4631      	mov	r1, r6
 8001d38:	4638      	mov	r0, r7
 8001d3a:	f7ff ff37 	bl	8001bac <_free_r>
 8001d3e:	e7e9      	b.n	8001d14 <_realloc_r+0x1c>
 8001d40:	4635      	mov	r5, r6
 8001d42:	e7e7      	b.n	8001d14 <_realloc_r+0x1c>

08001d44 <_sbrk_r>:
 8001d44:	b538      	push	{r3, r4, r5, lr}
 8001d46:	2300      	movs	r3, #0
 8001d48:	4d05      	ldr	r5, [pc, #20]	; (8001d60 <_sbrk_r+0x1c>)
 8001d4a:	4604      	mov	r4, r0
 8001d4c:	4608      	mov	r0, r1
 8001d4e:	602b      	str	r3, [r5, #0]
 8001d50:	f7fe fe7c 	bl	8000a4c <_sbrk>
 8001d54:	1c43      	adds	r3, r0, #1
 8001d56:	d102      	bne.n	8001d5e <_sbrk_r+0x1a>
 8001d58:	682b      	ldr	r3, [r5, #0]
 8001d5a:	b103      	cbz	r3, 8001d5e <_sbrk_r+0x1a>
 8001d5c:	6023      	str	r3, [r4, #0]
 8001d5e:	bd38      	pop	{r3, r4, r5, pc}
 8001d60:	200002a4 	.word	0x200002a4

08001d64 <__malloc_lock>:
 8001d64:	4801      	ldr	r0, [pc, #4]	; (8001d6c <__malloc_lock+0x8>)
 8001d66:	f7ff bee9 	b.w	8001b3c <__retarget_lock_acquire_recursive>
 8001d6a:	bf00      	nop
 8001d6c:	200002ac 	.word	0x200002ac

08001d70 <__malloc_unlock>:
 8001d70:	4801      	ldr	r0, [pc, #4]	; (8001d78 <__malloc_unlock+0x8>)
 8001d72:	f7ff bee4 	b.w	8001b3e <__retarget_lock_release_recursive>
 8001d76:	bf00      	nop
 8001d78:	200002ac 	.word	0x200002ac

08001d7c <_malloc_usable_size_r>:
 8001d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001d80:	1f18      	subs	r0, r3, #4
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	bfbc      	itt	lt
 8001d86:	580b      	ldrlt	r3, [r1, r0]
 8001d88:	18c0      	addlt	r0, r0, r3
 8001d8a:	4770      	bx	lr

08001d8c <_init>:
 8001d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d8e:	bf00      	nop
 8001d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d92:	bc08      	pop	{r3}
 8001d94:	469e      	mov	lr, r3
 8001d96:	4770      	bx	lr

08001d98 <_fini>:
 8001d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d9a:	bf00      	nop
 8001d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001d9e:	bc08      	pop	{r3}
 8001da0:	469e      	mov	lr, r3
 8001da2:	4770      	bx	lr
